import { MatchMedia } from '../match-media/match-media';
import { BreakPointRegistry } from '../breakpoints/break-point-registry';
import { LayoutConfigOptions } from '../tokens/library-config';
/**
 * Class
 */
import * as ɵngcc0 from '@angular/core';
export declare class MediaTrigger {
    protected breakpoints: BreakPointRegistry;
    protected matchMedia: MatchMedia;
    protected layoutConfig: LayoutConfigOptions;
    protected _platformId: Object;
    protected _document: any;
    constructor(breakpoints: BreakPointRegistry, matchMedia: MatchMedia, layoutConfig: LayoutConfigOptions, _platformId: Object, _document: any);
    /**
     * Manually activate range of breakpoints
     * @param list array of mediaQuery or alias strings
     */
    activate(list: string[]): void;
    /**
     * Restore original, 'real' breakpoints and emit events
     * to trigger stream notification
     */
    restore(): void;
    /**
     * Whenever window resizes, immediately auto-restore original
     * activations (if we are simulating activations)
     */
    private prepareAutoRestore;
    /**
     * Notify all matchMedia subscribers of de-activations
     *
     * Note: we must force 'matches' updates for
     *       future matchMedia::activation lookups
     */
    private deactivateAll;
    /**
     * Cache current activations as sorted, prioritized list of MediaChanges
     */
    private saveActivations;
    /**
     * Force set manual activations for specified mediaQuery list
     */
    private setActivations;
    /**
     * For specified mediaQuery list manually simulate activations or deactivations
     */
    private simulateMediaChanges;
    /**
     * Replace current registry with simulated registry...
     * Note: this is required since MediaQueryList::matches is 'readOnly'
     */
    private forceRegistryMatches;
    /**
     * Save current MatchMedia::registry items.
     */
    private cacheRegistryMatches;
    /**
     * Restore original, 'true' registry
     */
    private restoreRegistryMatches;
    /**
     * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver
     */
    private emitChangeEvent;
    private get currentActivations();
    private hasCachedRegistryMatches;
    private originalActivations;
    private originalRegistry;
    private resizeSubscription;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MediaTrigger, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEtdHJpZ2dlci5kLnRzIiwic291cmNlcyI6WyJtZWRpYS10cmlnZ2VyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdGNoTWVkaWEgfSBmcm9tICcuLi9tYXRjaC1tZWRpYS9tYXRjaC1tZWRpYSc7XG5pbXBvcnQgeyBCcmVha1BvaW50UmVnaXN0cnkgfSBmcm9tICcuLi9icmVha3BvaW50cy9icmVhay1wb2ludC1yZWdpc3RyeSc7XG5pbXBvcnQgeyBMYXlvdXRDb25maWdPcHRpb25zIH0gZnJvbSAnLi4vdG9rZW5zL2xpYnJhcnktY29uZmlnJztcbi8qKlxuICogQ2xhc3NcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWVkaWFUcmlnZ2VyIHtcbiAgICBwcm90ZWN0ZWQgYnJlYWtwb2ludHM6IEJyZWFrUG9pbnRSZWdpc3RyeTtcbiAgICBwcm90ZWN0ZWQgbWF0Y2hNZWRpYTogTWF0Y2hNZWRpYTtcbiAgICBwcm90ZWN0ZWQgbGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWdPcHRpb25zO1xuICAgIHByb3RlY3RlZCBfcGxhdGZvcm1JZDogT2JqZWN0O1xuICAgIHByb3RlY3RlZCBfZG9jdW1lbnQ6IGFueTtcbiAgICBjb25zdHJ1Y3RvcihicmVha3BvaW50czogQnJlYWtQb2ludFJlZ2lzdHJ5LCBtYXRjaE1lZGlhOiBNYXRjaE1lZGlhLCBsYXlvdXRDb25maWc6IExheW91dENvbmZpZ09wdGlvbnMsIF9wbGF0Zm9ybUlkOiBPYmplY3QsIF9kb2N1bWVudDogYW55KTtcbiAgICAvKipcbiAgICAgKiBNYW51YWxseSBhY3RpdmF0ZSByYW5nZSBvZiBicmVha3BvaW50c1xuICAgICAqIEBwYXJhbSBsaXN0IGFycmF5IG9mIG1lZGlhUXVlcnkgb3IgYWxpYXMgc3RyaW5nc1xuICAgICAqL1xuICAgIGFjdGl2YXRlKGxpc3Q6IHN0cmluZ1tdKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXN0b3JlIG9yaWdpbmFsLCAncmVhbCcgYnJlYWtwb2ludHMgYW5kIGVtaXQgZXZlbnRzXG4gICAgICogdG8gdHJpZ2dlciBzdHJlYW0gbm90aWZpY2F0aW9uXG4gICAgICovXG4gICAgcmVzdG9yZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFdoZW5ldmVyIHdpbmRvdyByZXNpemVzLCBpbW1lZGlhdGVseSBhdXRvLXJlc3RvcmUgb3JpZ2luYWxcbiAgICAgKiBhY3RpdmF0aW9ucyAoaWYgd2UgYXJlIHNpbXVsYXRpbmcgYWN0aXZhdGlvbnMpXG4gICAgICovXG4gICAgcHJpdmF0ZSBwcmVwYXJlQXV0b1Jlc3RvcmU7XG4gICAgLyoqXG4gICAgICogTm90aWZ5IGFsbCBtYXRjaE1lZGlhIHN1YnNjcmliZXJzIG9mIGRlLWFjdGl2YXRpb25zXG4gICAgICpcbiAgICAgKiBOb3RlOiB3ZSBtdXN0IGZvcmNlICdtYXRjaGVzJyB1cGRhdGVzIGZvclxuICAgICAqICAgICAgIGZ1dHVyZSBtYXRjaE1lZGlhOjphY3RpdmF0aW9uIGxvb2t1cHNcbiAgICAgKi9cbiAgICBwcml2YXRlIGRlYWN0aXZhdGVBbGw7XG4gICAgLyoqXG4gICAgICogQ2FjaGUgY3VycmVudCBhY3RpdmF0aW9ucyBhcyBzb3J0ZWQsIHByaW9yaXRpemVkIGxpc3Qgb2YgTWVkaWFDaGFuZ2VzXG4gICAgICovXG4gICAgcHJpdmF0ZSBzYXZlQWN0aXZhdGlvbnM7XG4gICAgLyoqXG4gICAgICogRm9yY2Ugc2V0IG1hbnVhbCBhY3RpdmF0aW9ucyBmb3Igc3BlY2lmaWVkIG1lZGlhUXVlcnkgbGlzdFxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0QWN0aXZhdGlvbnM7XG4gICAgLyoqXG4gICAgICogRm9yIHNwZWNpZmllZCBtZWRpYVF1ZXJ5IGxpc3QgbWFudWFsbHkgc2ltdWxhdGUgYWN0aXZhdGlvbnMgb3IgZGVhY3RpdmF0aW9uc1xuICAgICAqL1xuICAgIHByaXZhdGUgc2ltdWxhdGVNZWRpYUNoYW5nZXM7XG4gICAgLyoqXG4gICAgICogUmVwbGFjZSBjdXJyZW50IHJlZ2lzdHJ5IHdpdGggc2ltdWxhdGVkIHJlZ2lzdHJ5Li4uXG4gICAgICogTm90ZTogdGhpcyBpcyByZXF1aXJlZCBzaW5jZSBNZWRpYVF1ZXJ5TGlzdDo6bWF0Y2hlcyBpcyAncmVhZE9ubHknXG4gICAgICovXG4gICAgcHJpdmF0ZSBmb3JjZVJlZ2lzdHJ5TWF0Y2hlcztcbiAgICAvKipcbiAgICAgKiBTYXZlIGN1cnJlbnQgTWF0Y2hNZWRpYTo6cmVnaXN0cnkgaXRlbXMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBjYWNoZVJlZ2lzdHJ5TWF0Y2hlcztcbiAgICAvKipcbiAgICAgKiBSZXN0b3JlIG9yaWdpbmFsLCAndHJ1ZScgcmVnaXN0cnlcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlc3RvcmVSZWdpc3RyeU1hdGNoZXM7XG4gICAgLyoqXG4gICAgICogTWFudWFsbHkgZW1pdCBhIE1lZGlhQ2hhbmdlIGV2ZW50IHZpYSB0aGUgTWF0Y2hNZWRpYSB0byBNZWRpYU1hcnNoYWxsZXIgYW5kIE1lZGlhT2JzZXJ2ZXJcbiAgICAgKi9cbiAgICBwcml2YXRlIGVtaXRDaGFuZ2VFdmVudDtcbiAgICBwcml2YXRlIGdldCBjdXJyZW50QWN0aXZhdGlvbnMoKTtcbiAgICBwcml2YXRlIGhhc0NhY2hlZFJlZ2lzdHJ5TWF0Y2hlcztcbiAgICBwcml2YXRlIG9yaWdpbmFsQWN0aXZhdGlvbnM7XG4gICAgcHJpdmF0ZSBvcmlnaW5hbFJlZ2lzdHJ5O1xuICAgIHByaXZhdGUgcmVzaXplU3Vic2NyaXB0aW9uO1xufVxuIl19