import { BreakPoint } from './break-point';
import * as ɵngcc0 from '@angular/core';
export declare type OptionalBreakPoint = BreakPoint | null;
/**
 * Registry of 1..n MediaQuery breakpoint ranges
 * This is published as a provider and may be overridden from custom, application-specific ranges
 *
 */
export declare class BreakPointRegistry {
    readonly items: BreakPoint[];
    constructor(list: BreakPoint[]);
    /**
     * Search breakpoints by alias (e.g. gt-xs)
     */
    findByAlias(alias: string): OptionalBreakPoint;
    findByQuery(query: string): OptionalBreakPoint;
    /**
     * Get all the breakpoints whose ranges could overlapping `normal` ranges;
     * e.g. gt-sm overlaps md, lg, and xl
     */
    get overlappings(): BreakPoint[];
    /**
     * Get list of all registered (non-empty) breakpoint aliases
     */
    get aliases(): string[];
    /**
     * Aliases are mapped to properties using suffixes
     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'
     * for property layoutGtSM.
     */
    get suffixes(): string[];
    /**
     * Memoized lookup using custom predicate function
     */
    private findWithPredicate;
    /**
     * Memoized BreakPoint Lookups
     */
    private readonly findByMap;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BreakPointRegistry, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWstcG9pbnQtcmVnaXN0cnkuZC50cyIsInNvdXJjZXMiOlsiYnJlYWstcG9pbnQtcmVnaXN0cnkuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJyZWFrUG9pbnQgfSBmcm9tICcuL2JyZWFrLXBvaW50JztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgT3B0aW9uYWxCcmVha1BvaW50ID0gQnJlYWtQb2ludCB8IG51bGw7XG4vKipcbiAqIFJlZ2lzdHJ5IG9mIDEuLm4gTWVkaWFRdWVyeSBicmVha3BvaW50IHJhbmdlc1xuICogVGhpcyBpcyBwdWJsaXNoZWQgYXMgYSBwcm92aWRlciBhbmQgbWF5IGJlIG92ZXJyaWRkZW4gZnJvbSBjdXN0b20sIGFwcGxpY2F0aW9uLXNwZWNpZmljIHJhbmdlc1xuICpcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQnJlYWtQb2ludFJlZ2lzdHJ5IHtcbiAgICByZWFkb25seSBpdGVtczogQnJlYWtQb2ludFtdO1xuICAgIGNvbnN0cnVjdG9yKGxpc3Q6IEJyZWFrUG9pbnRbXSk7XG4gICAgLyoqXG4gICAgICogU2VhcmNoIGJyZWFrcG9pbnRzIGJ5IGFsaWFzIChlLmcuIGd0LXhzKVxuICAgICAqL1xuICAgIGZpbmRCeUFsaWFzKGFsaWFzOiBzdHJpbmcpOiBPcHRpb25hbEJyZWFrUG9pbnQ7XG4gICAgZmluZEJ5UXVlcnkocXVlcnk6IHN0cmluZyk6IE9wdGlvbmFsQnJlYWtQb2ludDtcbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHRoZSBicmVha3BvaW50cyB3aG9zZSByYW5nZXMgY291bGQgb3ZlcmxhcHBpbmcgYG5vcm1hbGAgcmFuZ2VzO1xuICAgICAqIGUuZy4gZ3Qtc20gb3ZlcmxhcHMgbWQsIGxnLCBhbmQgeGxcbiAgICAgKi9cbiAgICBnZXQgb3ZlcmxhcHBpbmdzKCk6IEJyZWFrUG9pbnRbXTtcbiAgICAvKipcbiAgICAgKiBHZXQgbGlzdCBvZiBhbGwgcmVnaXN0ZXJlZCAobm9uLWVtcHR5KSBicmVha3BvaW50IGFsaWFzZXNcbiAgICAgKi9cbiAgICBnZXQgYWxpYXNlcygpOiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBBbGlhc2VzIGFyZSBtYXBwZWQgdG8gcHJvcGVydGllcyB1c2luZyBzdWZmaXhlc1xuICAgICAqIGUuZy4gICdndC1zbScgZm9yIHByb3BlcnR5ICdsYXlvdXQnICB1c2VzIHN1ZmZpeCAnR3RTbSdcbiAgICAgKiBmb3IgcHJvcGVydHkgbGF5b3V0R3RTTS5cbiAgICAgKi9cbiAgICBnZXQgc3VmZml4ZXMoKTogc3RyaW5nW107XG4gICAgLyoqXG4gICAgICogTWVtb2l6ZWQgbG9va3VwIHVzaW5nIGN1c3RvbSBwcmVkaWNhdGUgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIGZpbmRXaXRoUHJlZGljYXRlO1xuICAgIC8qKlxuICAgICAqIE1lbW9pemVkIEJyZWFrUG9pbnQgTG9va3Vwc1xuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZmluZEJ5TWFwO1xufVxuIl19