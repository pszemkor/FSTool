/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NgZone } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { MediaChange } from '../media-change';
/**
 * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to
 * convert mediaQuery change callbacks to subscriber notifications. These notifications will be
 * performed within the ng Zone to trigger change detections and component updates.
 *
 * NOTE: both mediaQuery activations and de-activations are announced in notifications
 */
import * as ɵngcc0 from '@angular/core';
export declare class MatchMedia {
    protected _zone: NgZone;
    protected _platformId: Object;
    protected _document: any;
    /** Initialize source with 'all' so all non-responsive APIs trigger style updates */
    readonly source: BehaviorSubject<MediaChange>;
    registry: Map<string, MediaQueryList>;
    constructor(_zone: NgZone, _platformId: Object, _document: any);
    /**
     * Publish list of all current activations
     */
    get activations(): string[];
    /**
     * For the specified mediaQuery?
     */
    isActive(mediaQuery: string): boolean;
    /**
     * External observers can watch for all (or a specific) mql changes.
     *
     * If a mediaQuery is not specified, then ALL mediaQuery activations will
     * be announced.
     */
    observe(): Observable<MediaChange>;
    observe(mediaQueries: string[]): Observable<MediaChange>;
    observe(mediaQueries: string[], filterOthers: boolean): Observable<MediaChange>;
    /**
     * Based on the BreakPointRegistry provider, register internal listeners for each unique
     * mediaQuery. Each listener emits specific MediaChange data to observers
     */
    registerQuery(mediaQuery: string | string[]): MediaChange[];
    /**
     * Call window.matchMedia() to build a MediaQueryList; which
     * supports 0..n listeners for activation/deactivation
     */
    protected buildMQL(query: string): MediaQueryList;
    protected _observable$: Observable<MediaChange>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatchMedia, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0Y2gtbWVkaWEuZC50cyIsInNvdXJjZXMiOlsibWF0Y2gtbWVkaWEuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE1lZGlhQ2hhbmdlIH0gZnJvbSAnLi4vbWVkaWEtY2hhbmdlJztcbi8qKlxuICogTWVkaWFNb25pdG9yIGNvbmZpZ3VyZXMgbGlzdGVuZXJzIHRvIG1lZGlhUXVlcnkgY2hhbmdlcyBhbmQgcHVibGlzaGVzIGFuIE9ic2VydmFibGUgZmFjYWRlIHRvXG4gKiBjb252ZXJ0IG1lZGlhUXVlcnkgY2hhbmdlIGNhbGxiYWNrcyB0byBzdWJzY3JpYmVyIG5vdGlmaWNhdGlvbnMuIFRoZXNlIG5vdGlmaWNhdGlvbnMgd2lsbCBiZVxuICogcGVyZm9ybWVkIHdpdGhpbiB0aGUgbmcgWm9uZSB0byB0cmlnZ2VyIGNoYW5nZSBkZXRlY3Rpb25zIGFuZCBjb21wb25lbnQgdXBkYXRlcy5cbiAqXG4gKiBOT1RFOiBib3RoIG1lZGlhUXVlcnkgYWN0aXZhdGlvbnMgYW5kIGRlLWFjdGl2YXRpb25zIGFyZSBhbm5vdW5jZWQgaW4gbm90aWZpY2F0aW9uc1xuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNYXRjaE1lZGlhIHtcbiAgICBwcm90ZWN0ZWQgX3pvbmU6IE5nWm9uZTtcbiAgICBwcm90ZWN0ZWQgX3BsYXRmb3JtSWQ6IE9iamVjdDtcbiAgICBwcm90ZWN0ZWQgX2RvY3VtZW50OiBhbnk7XG4gICAgLyoqIEluaXRpYWxpemUgc291cmNlIHdpdGggJ2FsbCcgc28gYWxsIG5vbi1yZXNwb25zaXZlIEFQSXMgdHJpZ2dlciBzdHlsZSB1cGRhdGVzICovXG4gICAgcmVhZG9ubHkgc291cmNlOiBCZWhhdmlvclN1YmplY3Q8TWVkaWFDaGFuZ2U+O1xuICAgIHJlZ2lzdHJ5OiBNYXA8c3RyaW5nLCBNZWRpYVF1ZXJ5TGlzdD47XG4gICAgY29uc3RydWN0b3IoX3pvbmU6IE5nWm9uZSwgX3BsYXRmb3JtSWQ6IE9iamVjdCwgX2RvY3VtZW50OiBhbnkpO1xuICAgIC8qKlxuICAgICAqIFB1Ymxpc2ggbGlzdCBvZiBhbGwgY3VycmVudCBhY3RpdmF0aW9uc1xuICAgICAqL1xuICAgIGdldCBhY3RpdmF0aW9ucygpOiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBGb3IgdGhlIHNwZWNpZmllZCBtZWRpYVF1ZXJ5P1xuICAgICAqL1xuICAgIGlzQWN0aXZlKG1lZGlhUXVlcnk6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRXh0ZXJuYWwgb2JzZXJ2ZXJzIGNhbiB3YXRjaCBmb3IgYWxsIChvciBhIHNwZWNpZmljKSBtcWwgY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIElmIGEgbWVkaWFRdWVyeSBpcyBub3Qgc3BlY2lmaWVkLCB0aGVuIEFMTCBtZWRpYVF1ZXJ5IGFjdGl2YXRpb25zIHdpbGxcbiAgICAgKiBiZSBhbm5vdW5jZWQuXG4gICAgICovXG4gICAgb2JzZXJ2ZSgpOiBPYnNlcnZhYmxlPE1lZGlhQ2hhbmdlPjtcbiAgICBvYnNlcnZlKG1lZGlhUXVlcmllczogc3RyaW5nW10pOiBPYnNlcnZhYmxlPE1lZGlhQ2hhbmdlPjtcbiAgICBvYnNlcnZlKG1lZGlhUXVlcmllczogc3RyaW5nW10sIGZpbHRlck90aGVyczogYm9vbGVhbik6IE9ic2VydmFibGU8TWVkaWFDaGFuZ2U+O1xuICAgIC8qKlxuICAgICAqIEJhc2VkIG9uIHRoZSBCcmVha1BvaW50UmVnaXN0cnkgcHJvdmlkZXIsIHJlZ2lzdGVyIGludGVybmFsIGxpc3RlbmVycyBmb3IgZWFjaCB1bmlxdWVcbiAgICAgKiBtZWRpYVF1ZXJ5LiBFYWNoIGxpc3RlbmVyIGVtaXRzIHNwZWNpZmljIE1lZGlhQ2hhbmdlIGRhdGEgdG8gb2JzZXJ2ZXJzXG4gICAgICovXG4gICAgcmVnaXN0ZXJRdWVyeShtZWRpYVF1ZXJ5OiBzdHJpbmcgfCBzdHJpbmdbXSk6IE1lZGlhQ2hhbmdlW107XG4gICAgLyoqXG4gICAgICogQ2FsbCB3aW5kb3cubWF0Y2hNZWRpYSgpIHRvIGJ1aWxkIGEgTWVkaWFRdWVyeUxpc3Q7IHdoaWNoXG4gICAgICogc3VwcG9ydHMgMC4ubiBsaXN0ZW5lcnMgZm9yIGFjdGl2YXRpb24vZGVhY3RpdmF0aW9uXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGJ1aWxkTVFMKHF1ZXJ5OiBzdHJpbmcpOiBNZWRpYVF1ZXJ5TGlzdDtcbiAgICBwcm90ZWN0ZWQgX29ic2VydmFibGUkOiBPYnNlcnZhYmxlPE1lZGlhQ2hhbmdlPjtcbn1cbiJdfQ==