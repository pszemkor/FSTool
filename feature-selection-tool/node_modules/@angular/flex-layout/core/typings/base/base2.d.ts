/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ElementRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { StyleDefinition, StyleUtils } from '../style-utils/style-utils';
import { StyleBuilder } from '../style-builder/style-builder';
import { MediaMarshaller } from '../media-marshaller/media-marshaller';
import * as ɵngcc0 from '@angular/core';
export declare abstract class BaseDirective2 implements OnChanges, OnDestroy {
    protected elementRef: ElementRef;
    protected styleBuilder: StyleBuilder;
    protected styler: StyleUtils;
    protected marshal: MediaMarshaller;
    protected DIRECTIVE_KEY: string;
    protected inputs: string[];
    /** The most recently used styles for the builder */
    protected mru: StyleDefinition;
    protected destroySubject: Subject<void>;
    /** Access to host element's parent DOM node */
    protected get parentElement(): HTMLElement | null;
    /** Access to the HTMLElement for the directive */
    protected get nativeElement(): HTMLElement;
    /** Access to the activated value for the directive */
    get activatedValue(): string;
    set activatedValue(value: string);
    /** Cache map for style computation */
    protected styleCache: Map<string, StyleDefinition>;
    protected constructor(elementRef: ElementRef, styleBuilder: StyleBuilder, styler: StyleUtils, marshal: MediaMarshaller);
    /** For @Input changes */
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /** Register with central marshaller service */
    protected init(extraTriggers?: Observable<any>[]): void;
    /** Add styles to the element using predefined style builder */
    protected addStyles(input: string, parent?: Object): void;
    /** Remove generated styles from an element using predefined style builder */
    protected clearStyles(): void;
    /** Force trigger style updates on DOM element */
    protected triggerUpdate(): void;
    /**
     * Determine the DOM element's Flexbox flow (flex-direction).
     *
     * Check inline style first then check computed (stylesheet) style.
     * And optionally add the flow value to element's inline style.
     */
    protected getFlexFlowDirection(target: HTMLElement, addIfMissing?: boolean): string;
    /** Applies styles given via string pair or object map to the directive element */
    protected applyStyleToElement(style: StyleDefinition, value?: string | number, element?: HTMLElement): void;
    protected setValue(val: any, bp: string): void;
    protected updateWithValue(input: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseDirective2, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseDirective2, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZTIuZC50cyIsInNvdXJjZXMiOlsiYmFzZTIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFN0eWxlRGVmaW5pdGlvbiwgU3R5bGVVdGlscyB9IGZyb20gJy4uL3N0eWxlLXV0aWxzL3N0eWxlLXV0aWxzJztcbmltcG9ydCB7IFN0eWxlQnVpbGRlciB9IGZyb20gJy4uL3N0eWxlLWJ1aWxkZXIvc3R5bGUtYnVpbGRlcic7XG5pbXBvcnQgeyBNZWRpYU1hcnNoYWxsZXIgfSBmcm9tICcuLi9tZWRpYS1tYXJzaGFsbGVyL21lZGlhLW1hcnNoYWxsZXInO1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgQmFzZURpcmVjdGl2ZTIgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIHN0eWxlQnVpbGRlcjogU3R5bGVCdWlsZGVyO1xuICAgIHByb3RlY3RlZCBzdHlsZXI6IFN0eWxlVXRpbHM7XG4gICAgcHJvdGVjdGVkIG1hcnNoYWw6IE1lZGlhTWFyc2hhbGxlcjtcbiAgICBwcm90ZWN0ZWQgRElSRUNUSVZFX0tFWTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBpbnB1dHM6IHN0cmluZ1tdO1xuICAgIC8qKiBUaGUgbW9zdCByZWNlbnRseSB1c2VkIHN0eWxlcyBmb3IgdGhlIGJ1aWxkZXIgKi9cbiAgICBwcm90ZWN0ZWQgbXJ1OiBTdHlsZURlZmluaXRpb247XG4gICAgcHJvdGVjdGVkIGRlc3Ryb3lTdWJqZWN0OiBTdWJqZWN0PHZvaWQ+O1xuICAgIC8qKiBBY2Nlc3MgdG8gaG9zdCBlbGVtZW50J3MgcGFyZW50IERPTSBub2RlICovXG4gICAgcHJvdGVjdGVkIGdldCBwYXJlbnRFbGVtZW50KCk6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICAvKiogQWNjZXNzIHRvIHRoZSBIVE1MRWxlbWVudCBmb3IgdGhlIGRpcmVjdGl2ZSAqL1xuICAgIHByb3RlY3RlZCBnZXQgbmF0aXZlRWxlbWVudCgpOiBIVE1MRWxlbWVudDtcbiAgICAvKiogQWNjZXNzIHRvIHRoZSBhY3RpdmF0ZWQgdmFsdWUgZm9yIHRoZSBkaXJlY3RpdmUgKi9cbiAgICBnZXQgYWN0aXZhdGVkVmFsdWUoKTogc3RyaW5nO1xuICAgIHNldCBhY3RpdmF0ZWRWYWx1ZSh2YWx1ZTogc3RyaW5nKTtcbiAgICAvKiogQ2FjaGUgbWFwIGZvciBzdHlsZSBjb21wdXRhdGlvbiAqL1xuICAgIHByb3RlY3RlZCBzdHlsZUNhY2hlOiBNYXA8c3RyaW5nLCBTdHlsZURlZmluaXRpb24+O1xuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBzdHlsZUJ1aWxkZXI6IFN0eWxlQnVpbGRlciwgc3R5bGVyOiBTdHlsZVV0aWxzLCBtYXJzaGFsOiBNZWRpYU1hcnNoYWxsZXIpO1xuICAgIC8qKiBGb3IgQElucHV0IGNoYW5nZXMgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKiBSZWdpc3RlciB3aXRoIGNlbnRyYWwgbWFyc2hhbGxlciBzZXJ2aWNlICovXG4gICAgcHJvdGVjdGVkIGluaXQoZXh0cmFUcmlnZ2Vycz86IE9ic2VydmFibGU8YW55PltdKTogdm9pZDtcbiAgICAvKiogQWRkIHN0eWxlcyB0byB0aGUgZWxlbWVudCB1c2luZyBwcmVkZWZpbmVkIHN0eWxlIGJ1aWxkZXIgKi9cbiAgICBwcm90ZWN0ZWQgYWRkU3R5bGVzKGlucHV0OiBzdHJpbmcsIHBhcmVudD86IE9iamVjdCk6IHZvaWQ7XG4gICAgLyoqIFJlbW92ZSBnZW5lcmF0ZWQgc3R5bGVzIGZyb20gYW4gZWxlbWVudCB1c2luZyBwcmVkZWZpbmVkIHN0eWxlIGJ1aWxkZXIgKi9cbiAgICBwcm90ZWN0ZWQgY2xlYXJTdHlsZXMoKTogdm9pZDtcbiAgICAvKiogRm9yY2UgdHJpZ2dlciBzdHlsZSB1cGRhdGVzIG9uIERPTSBlbGVtZW50ICovXG4gICAgcHJvdGVjdGVkIHRyaWdnZXJVcGRhdGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgdGhlIERPTSBlbGVtZW50J3MgRmxleGJveCBmbG93IChmbGV4LWRpcmVjdGlvbikuXG4gICAgICpcbiAgICAgKiBDaGVjayBpbmxpbmUgc3R5bGUgZmlyc3QgdGhlbiBjaGVjayBjb21wdXRlZCAoc3R5bGVzaGVldCkgc3R5bGUuXG4gICAgICogQW5kIG9wdGlvbmFsbHkgYWRkIHRoZSBmbG93IHZhbHVlIHRvIGVsZW1lbnQncyBpbmxpbmUgc3R5bGUuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldEZsZXhGbG93RGlyZWN0aW9uKHRhcmdldDogSFRNTEVsZW1lbnQsIGFkZElmTWlzc2luZz86IGJvb2xlYW4pOiBzdHJpbmc7XG4gICAgLyoqIEFwcGxpZXMgc3R5bGVzIGdpdmVuIHZpYSBzdHJpbmcgcGFpciBvciBvYmplY3QgbWFwIHRvIHRoZSBkaXJlY3RpdmUgZWxlbWVudCAqL1xuICAgIHByb3RlY3RlZCBhcHBseVN0eWxlVG9FbGVtZW50KHN0eWxlOiBTdHlsZURlZmluaXRpb24sIHZhbHVlPzogc3RyaW5nIHwgbnVtYmVyLCBlbGVtZW50PzogSFRNTEVsZW1lbnQpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzZXRWYWx1ZSh2YWw6IGFueSwgYnA6IHN0cmluZyk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZVdpdGhWYWx1ZShpbnB1dDogc3RyaW5nKTogdm9pZDtcbn1cbiJdfQ==