/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Below are constants for LView indices to help us look up LView members
// without having to remember the specific indices.
// Uglify will inline these when minifying so there shouldn't be a cost.
export var HOST = 0;
export var TVIEW = 1;
export var FLAGS = 2;
export var PARENT = 3;
export var NEXT = 4;
export var QUERIES = 5;
export var T_HOST = 6;
export var CLEANUP = 7;
export var CONTEXT = 8;
export var INJECTOR = 9;
export var RENDERER_FACTORY = 10;
export var RENDERER = 11;
export var SANITIZER = 12;
export var CHILD_HEAD = 13;
export var CHILD_TAIL = 14;
export var DECLARATION_VIEW = 15;
export var DECLARATION_COMPONENT_VIEW = 16;
export var DECLARATION_LCONTAINER = 17;
export var PREORDER_HOOK_FLAGS = 18;
/** Size of LView's header. Necessary to adjust for it when setting slots.  */
export var HEADER_OFFSET = 19;
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
export var unusedValueExportToPlacateAjd = 1;
//# sourceMappingURL=data:application/json;base64,