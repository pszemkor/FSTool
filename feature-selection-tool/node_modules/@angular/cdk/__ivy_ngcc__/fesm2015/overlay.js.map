{"version":3,"file":"overlay.js","sources":["../../../../../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../../../../../src/cdk/overlay/scroll/scroll-strategy.ts","../../../../../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../../../../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../../../../../src/cdk/overlay/position/scroll-clip.ts","../../../../../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../../../../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../../../../../src/cdk/overlay/overlay-config.ts","../../../../../../src/cdk/overlay/position/connected-position.ts","../../../../../../src/cdk/overlay/keyboard/overlay-keyboard-dispatcher.ts","../../../../../../src/cdk/overlay/overlay-container.ts","../../../../../../src/cdk/overlay/overlay-ref.ts","../../../../../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../../../../../src/cdk/overlay/position/connected-position-strategy.ts","../../../../../../src/cdk/overlay/position/global-position-strategy.ts","../../../../../../src/cdk/overlay/position/overlay-position-builder.ts","../../../../../../src/cdk/overlay/overlay.ts","../../../../../../src/cdk/overlay/overlay-directives.ts","../../../../../../src/cdk/overlay/overlay-module.ts","../../../../../../src/cdk/overlay/fullscreen-overlay-container.ts","../../../../../../src/cdk/overlay/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n/**\n * Extended `CSSStyleDeclaration` that includes `scrollBehavior` which isn't part of the\n * built-in TS typings. Once it is, this declaration can be removed safely.\n * @docs-private\n */\ntype ScrollBehaviorCSSStyleDeclaration = CSSStyleDeclaration & {scrollBehavior: string};\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style as ScrollBehaviorCSSStyleDeclaration;\n      const bodyStyle = body.style as ScrollBehaviorCSSStyleDeclaration;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n      bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayReference) => void;\n\n  /** Detaches the scroll strategy from the current overlay. */\n  detach?: () => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys =\n          Object.keys(config) as Iterable<keyof OverlayConfig> & Array<keyof OverlayConfig>;\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key] as any;\n        }\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[]) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {OverlayRef} from '../overlay-ref';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayRef[] = [];\n\n  private _document: Document;\n  private _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayRef): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener);\n      this._isAttached = true;\n    }\n\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayRef): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this._detach();\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  private _detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEventSubscriptions > 0) {\n        overlays[i]._keydownEvents.next(event);\n        break;\n      }\n    }\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(\n    dispatcher: OverlayKeyboardDispatcher, _document: any) {\n  return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n  // If there is already an OverlayKeyboardDispatcher available, use that.\n  // Otherwise, provide a new one.\n  provide: OverlayKeyboardDispatcher,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n\n    // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n    // of the type expected by Angular\n    DOCUMENT as InjectionToken<any>\n  ],\n  useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nconst isTestEnvironment: boolean = typeof window !== 'undefined' && !!window &&\n  !!((window as any).__karma__ || (window as any).jasmine);\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n  protected _document: Document;\n\n  constructor(\n    @Inject(DOCUMENT) document: any,\n    /**\n     * @deprecated `platform` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    protected _platform?: Platform) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    const container = this._containerElement;\n\n    if (container && container.parentNode) {\n      container.parentNode.removeChild(container);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    // @breaking-change 10.0.0 Remove null check for `_platform`.\n    const isBrowser = this._platform ? this._platform.isBrowser : typeof window !== 'undefined';\n    const containerClass = 'cdk-overlay-container';\n\n    if (isBrowser || isTestEnvironment) {\n      const oppositePlatformContainers =\n          this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                                          `.${containerClass}[platform=\"test\"]`);\n\n      // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].parentNode!.removeChild(oppositePlatformContainers[i]);\n      }\n    }\n\n    const container = this._document.createElement('div');\n    container.classList.add(containerClass);\n\n    // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n    if (isTestEnvironment) {\n      container.setAttribute('platform', 'test');\n    } else if (!isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer,\n  _document: any) {\n  return parentContainer || new OverlayContainer(_document);\n}\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [\n    [new Optional(), new SkipSelf(), OverlayContainer],\n    DOCUMENT as InjectionToken<any> // We need to use the InjectionToken somewhere to keep TS happy\n  ],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, merge, SubscriptionLike, Subscription, Observer} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {OverlayReference} from './overlay-reference';\nimport {PositionStrategy} from './position/position-strategy';\nimport {ScrollStrategy} from './scroll';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet, OverlayReference {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n  private _positionStrategy: PositionStrategy | undefined;\n  private _scrollStrategy: ScrollStrategy | undefined;\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n  private _backdropClickHandler = (event: MouseEvent) => this._backdropClick.next(event);\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n\n  private _keydownEventsObservable: Observable<KeyboardEvent> =\n      new Observable((observer: Observer<KeyboardEvent>) => {\n        const subscription = this._keydownEvents.subscribe(observer);\n        this._keydownEventSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._keydownEventSubscriptions--;\n        };\n      });\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Amount of subscriptions to the keydown events. */\n  _keydownEventSubscriptions = 0;\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document,\n      // @breaking-change 8.0.0 `_location` parameter to be made required.\n      private _location?: Location) {\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    // Update the pane element with the given configuration.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    // @breaking-change 8.0.0 remove the null check for `_location`\n    // once the constructor parameter is made required.\n    if (this._config.disposeOnNavigation && this._location) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n\n    // Stop listening for location changes.\n    this._locationChanges.unsubscribe();\n\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n    this.detachBackdrop();\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    this._previousHostParent = this._pane = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEventsObservable;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition(): void {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy: PositionStrategy): void {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig): void {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality): void {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Switches to a new scroll strategy. */\n  updateScrollStrategy(strategy: ScrollStrategy): void {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', this._backdropClickHandler);\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    let timeoutId: number;\n    let finishDetach = () => {\n      // It may not be attached to anything in certain cases (e.g. unit tests).\n      if (backdropToDetach) {\n        backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n        backdropToDetach.removeEventListener('transitionend', finishDetach);\n\n        if (backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n      }\n\n      // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n      if (this._backdropElement == backdropToDetach) {\n        this._backdropElement = null;\n      }\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach!, this._config.backdropClass, false);\n      }\n\n      clearTimeout(timeoutId);\n    };\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach!.addEventListener('transitionend', finishDetach);\n    });\n\n    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n    backdropToDetach.style.pointerEvents = 'none';\n\n    // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n    timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classList = element.classList;\n\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      // Also trying to add an empty string to a DOMTokenList will throw.\n      if (cssClass) {\n        isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n      }\n    });\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  private _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable\n        .asObservable()\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._previousHostParent.removeChild(this._host);\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n\n  /** Disposes of a scroll strategy. */\n  private _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {OverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/** Possible values that can be set as the origin of a FlexibleConnectedPositionStrategy. */\nexport type FlexibleConnectedPositionStrategyOrigin = ElementRef | Element | Point & {\n  width?: number;\n  height?: number;\n};\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender: boolean;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private _scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: FlexibleConnectedPositionStrategyOrigin;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n  private _appliedPanelClasses: string[] = [];\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number, y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> =\n      this._positionChanges.asObservable();\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  constructor(\n      connectedTo: FlexibleConnectedPositionStrategyOrigin, private _viewportRuler: ViewportRuler,\n      private _document: Document, private _platform: Platform,\n      private _overlayContainer: OverlayContainer) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach(): void {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      } as CSSStyleDeclaration);\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null!;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]): this {\n    this._scrollables = scrollables;\n    return this;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n  setOrigin(origin: FlexibleConnectedPositionStrategyOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param overlay Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point,\n                               overlay: ClientRect,\n                               scrollPosition: ViewportScrollPosition): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    }\n\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> =\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height: number, top: number, bottom: number;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !isRtl) ||\n        (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !isRtl) ||\n        (position.overlayX === 'start' && isRtl);\n\n    let width: number, left: number, right: number;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n    const hasExactPosition = this._hasExactPosition();\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n    const config = this._overlayRef.getConfig();\n\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: '', bottom: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    let virtualKeyboardOffset =\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    overlayPoint.y -= virtualKeyboardOffset;\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement!.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: '', right: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement!.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement!.clientWidth;\n    const height = this._document.documentElement!.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (!this._preferredPositions.length) {\n      throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n    }\n\n    // TODO(crisbeto): remove these once Angular's template type\n    // checking is advanced enough to catch these cases.\n    this._preferredPositions.forEach(pair => {\n      validateHorizontalPosition('originX', pair.originX);\n      validateVerticalPosition('originY', pair.originY);\n      validateHorizontalPosition('overlayX', pair.overlayX);\n      validateVerticalPosition('overlayY', pair.overlayY);\n    });\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  private _addPanelClasses(cssClasses: string | string[]) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  private _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n      this._appliedPanelClasses = [];\n    }\n  }\n\n  /** Returns the ClientRect of the current origin. */\n  private _getOriginRect(): ClientRect {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    }\n\n    // Check for Element so SVG elements are also supported.\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0;\n\n    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width\n    };\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n  panelClass?: string | string[];\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination: CSSStyleDeclaration,\n                      source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n\n\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input: number|string|null|undefined): number|null {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return (!units || units === 'px') ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\nimport {ElementRef} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {OverlayContainer} from '../overlay-container';\nimport {OverlayReference} from '../overlay-reference';\n\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {PositionStrategy} from './position-strategy';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  private _direction: Direction | null;\n\n  /** Whether the we're dealing with an RTL context */\n  get _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  get onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._positionStrategy.positionChanges;\n  }\n\n  constructor(\n      originPos: OriginConnectionPosition, overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef<HTMLElement>, viewportRuler: ViewportRuler, document: Document,\n      platform: Platform, overlayContainer: OverlayContainer) {\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(\n                                 connectedTo, viewportRuler, document, platform, overlayContainer)\n                                 .withFlexibleDimensions(false)\n                                 .withPush(false)\n                                 .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayReference} from '../overlay-reference';\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n  private _isDisposed: boolean;\n\n  attach(overlayRef: OverlayReference): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n    const {width, height, maxWidth, maxHeight} = config;\n    const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n                                      (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n                                    (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (shouldBeFlushHorizontally) {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose(): void {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n      styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n\n    this._overlayRef = null!;\n    this._isDisposed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable} from '@angular/core';\n\nimport {OverlayContainer} from '../overlay-container';\n\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n      private _viewportRuler: ViewportRuler, @Inject(DOCUMENT) private _document: any,\n      private _platform: Platform, private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 8.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(\n        originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform,\n        this._overlayContainer);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n  flexibleConnectedTo(origin: FlexibleConnectedPositionStrategyOrigin):\n    FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document,\n        this._platform, this._overlayContainer);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT, Location} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n  Optional,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './keyboard/overlay-keyboard-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality,\n              // @breaking-change 8.0.0 `_location` parameter to be made required.\n              @Optional() private _location?: Location) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document, this._location);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector,\n                               this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return (config?: RepositionScrollStrategyConfig) => overlay.scrollStrategies.reposition(config);\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _growAfterOpen = false;\n  private _flexibleDimensions = false;\n  private _push = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /**\n   * This input overrides the positions input if specified. It lets users pass\n   * in arbitrary positioning strategies.\n   */\n  @Input('cdkConnectedOverlayPositionStrategy') positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** The custom class to add to the overlay pane element. */\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** CSS selector which to set the transform origin. */\n  @Input('cdkConnectedOverlayTransformOriginOn') transformOriginSelector: string;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input('cdkConnectedOverlayFlexibleDimensions')\n  get flexibleDimensions() { return this._flexibleDimensions; }\n  set flexibleDimensions(value: boolean) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input('cdkConnectedOverlayGrowAfterOpen')\n  get growAfterOpen() { return this._growAfterOpen; }\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input('cdkConnectedOverlayPush')\n  get push() { return this._push; }\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) scrollStrategyFactory: any,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n\n    this._overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        this._detachOverlay();\n      }\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position =\n      this.positionStrategy || this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined,\n    }));\n\n    return positionStrategy\n      .setOrigin(this.origin.elementRef)\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition)\n      .withTransformOriginOn(this.transformOriginSelector);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n\n    this._updatePositionStrategy(strategy);\n    strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n\n    return strategy;\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n  }\n\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n  static ngAcceptInputType_lockPosition: BooleanInput;\n  static ngAcceptInputType_flexibleDimensions: BooleanInput;\n  static ngAcceptInputType_growAfterOpen: BooleanInput;\n  static ngAcceptInputType_push: BooleanInput;\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {NgModule, Provider} from '@angular/core';\nimport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER} from './keyboard/overlay-keyboard-dispatcher';\nimport {Overlay} from './overlay';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollingModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [\n    Overlay,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class OverlayModule {}\n\n\n/**\n * @deprecated Use `OverlayModule` instead.\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\nimport {Platform} from '@angular/cdk/platform';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable({providedIn: 'root'})\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(\n    @Inject(DOCUMENT) _document: any,\n    /**\n     * @deprecated `platform` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    platform?: Platform) {\n    super(_document, platform);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      const _document = this._document as any;\n\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    const _document = this._document as any;\n\n    return _document.fullscreenElement ||\n           _document.webkitFullscreenElement ||\n           _document.mozFullScreenElement ||\n           _document.msFullscreenElement ||\n           null;\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as Éµangular_material_src_cdk_overlay_overlay_g,OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as Éµangular_material_src_cdk_overlay_overlay_f} from './keyboard/overlay-keyboard-dispatcher';\nexport {OVERLAY_CONTAINER_PROVIDER as Éµangular_material_src_cdk_overlay_overlay_b,OVERLAY_CONTAINER_PROVIDER_FACTORY as Éµangular_material_src_cdk_overlay_overlay_a} from './overlay-container';\nexport {CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as Éµangular_material_src_cdk_overlay_overlay_c,CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as Éµangular_material_src_cdk_overlay_overlay_e,CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as Éµangular_material_src_cdk_overlay_overlay_d} from './overlay-directives';"]}