{"version":3,"file":"clipboard.js","sources":["../../../../../../src/cdk/clipboard/pending-copy.ts","../../../../../../src/cdk/clipboard/clipboard.ts","../../../../../../src/cdk/clipboard/copy-to-clipboard.ts","../../../../../../src/cdk/clipboard/clipboard-module.ts","../../../../../../src/cdk/clipboard/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement|undefined;\n\n  constructor(text: string, private readonly _document: Document) {\n    const textarea = this._textarea = this._document.createElement('textarea');\n    const styles = textarea.style;\n\n    // Hide the element for display and accessibility. Set an\n    // absolute position so the page layout isn't affected.\n    styles.opacity = '0';\n    styles.position = 'absolute';\n    styles.left = styles.top = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    this._document.body.appendChild(textarea);\n  }\n\n  /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n    try {  // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement as HTMLOrSVGElement | null;\n\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n\n        if (currentFocus) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n    return successful;\n  }\n\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n\n    if (textarea) {\n      if (textarea.parentNode) {\n        textarea.parentNode.removeChild(textarea);\n      }\n\n      this._textarea = undefined;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {PendingCopy} from './pending-copy';\n\n\n/**\n * A service for copying text to the clipboard.\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private readonly _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n    return successful;\n  }\n\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  Output,\n  NgZone,\n  InjectionToken,\n  Inject,\n  Optional,\n  OnDestroy,\n} from '@angular/core';\nimport {Clipboard} from './clipboard';\nimport {PendingCopy} from './pending-copy';\n\n/** Object that can be used to configure the default options for `CdkCopyToClipboard`. */\nexport interface CdkCopyToClipboardConfig {\n  /** Default number of attempts to make when copying text to the clipboard. */\n  attempts?: number;\n}\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nexport const CKD_COPY_TO_CLIPBOARD_CONFIG =\n    new InjectionToken<CdkCopyToClipboardConfig>('CKD_COPY_TO_CLIPBOARD_CONFIG');\n\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\n@Directive({\n  selector: '[cdkCopyToClipboard]',\n  host: {\n    '(click)': 'copy()',\n  }\n})\nexport class CdkCopyToClipboard implements OnDestroy {\n  /** Content to be copied. */\n  @Input('cdkCopyToClipboard') text: string = '';\n\n  /**\n   * How many times to attempt to copy the text. This may be necessary for longer text, because\n   * the browser needs time to fill an intermediate textarea element and copy the content.\n   */\n  @Input('cdkCopyToClipboardAttempts') attempts: number = 1;\n\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   */\n  @Output('cdkCopyToClipboardCopied') copied = new EventEmitter<boolean>();\n\n  /**\n   * Emits when some text is copied to the clipboard. The\n   * emitted value indicates whether copying was successful.\n   * @deprecated Use `cdkCopyToClipboardCopied` instead.\n   * @breaking-change 10.0.0\n   */\n  @Output('copied') _deprecatedCopied = this.copied;\n\n  /** Copies that are currently being attempted. */\n  private _pending = new Set<PendingCopy>();\n\n  /** Whether the directive has been destroyed. */\n  private _destroyed: boolean;\n\n  /** Timeout for the current copy attempt. */\n  private _currentTimeout: any;\n\n  constructor(\n    private _clipboard: Clipboard,\n    /**\n     * @deprecated _ngZone parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    private _ngZone?: NgZone,\n    @Optional() @Inject(CKD_COPY_TO_CLIPBOARD_CONFIG) config?: CdkCopyToClipboardConfig) {\n\n    if (config && config.attempts != null) {\n      this.attempts = config.attempts;\n    }\n  }\n\n  /** Copies the current text to the clipboard. */\n  copy(attempts: number = this.attempts): void {\n    if (attempts > 1) {\n      let remainingAttempts = attempts;\n      const pending = this._clipboard.beginCopy(this.text);\n      this._pending.add(pending);\n\n      const attempt = () => {\n        const successful = pending.copy();\n        if (!successful && --remainingAttempts && !this._destroyed) {\n          // @breaking-change 10.0.0 Remove null check for `_ngZone`.\n          if (this._ngZone) {\n            this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n          } else {\n            // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n            this._currentTimeout = setTimeout(attempt, 1);\n          }\n        } else {\n          this._currentTimeout = null;\n          this._pending.delete(pending);\n          pending.destroy();\n          this.copied.emit(successful);\n        }\n      };\n      attempt();\n    } else {\n      this.copied.emit(this._clipboard.copy(this.text));\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._currentTimeout) {\n      clearTimeout(this._currentTimeout);\n    }\n\n    this._pending.forEach(copy => copy.destroy());\n    this._pending.clear();\n    this._destroyed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkCopyToClipboard} from './copy-to-clipboard';\n\n@NgModule({\n  declarations: [CdkCopyToClipboard],\n  exports: [CdkCopyToClipboard],\n})\nexport class ClipboardModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}