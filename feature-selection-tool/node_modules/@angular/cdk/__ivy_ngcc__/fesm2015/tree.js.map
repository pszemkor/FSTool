{"version":3,"file":"tree.js","sources":["../../../../../../src/cdk/tree/control/base-tree-control.ts","../../../../../../src/cdk/tree/control/flat-tree-control.ts","../../../../../../src/cdk/tree/control/nested-tree-control.ts","../../../../../../src/cdk/tree/control/tree-control.ts","../../../../../../src/cdk/tree/outlet.ts","../../../../../../src/cdk/tree/node.ts","../../../../../../src/cdk/tree/tree-errors.ts","../../../../../../src/cdk/tree/tree.ts","../../../../../../src/cdk/tree/nested-node.ts","../../../../../../src/cdk/tree/padding.ts","../../../../../../src/cdk/tree/toggle.ts","../../../../../../src/cdk/tree/tree-module.ts","../../../../../../src/cdk/tree/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs';\nimport {TreeControl} from './tree-control';\n\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nexport abstract class BaseTreeControl<T> implements TreeControl<T> {\n\n  /** Gets a list of descendent data nodes of a subtree rooted at given data node recursively. */\n  abstract getDescendants(dataNode: T): T[];\n\n  /** Expands all data nodes in the tree. */\n  abstract expandAll(): void;\n\n  /** Saved data node for `expandAll` action. */\n  dataNodes: T[];\n\n  /** A selection model with multi-selection to track expansion status. */\n  expansionModel: SelectionModel<T> = new SelectionModel<T>(true);\n\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\n  getLevel: (dataNode: T) => number;\n\n  /**\n   * Whether the data node is expandable. Returns true if expandable.\n   * This is for flat tree node.\n   */\n  isExpandable: (dataNode: T) => boolean;\n\n  /** Gets a stream that emits whenever the given data node's children change. */\n  getChildren: (dataNode: T) => (Observable<T[]> | T[] | undefined | null);\n\n  /** Toggles one single data node's expanded/collapsed state. */\n  toggle(dataNode: T): void {\n    this.expansionModel.toggle(dataNode);\n  }\n\n  /** Expands one single data node. */\n  expand(dataNode: T): void {\n    this.expansionModel.select(dataNode);\n  }\n\n  /** Collapses one single data node. */\n  collapse(dataNode: T): void {\n    this.expansionModel.deselect(dataNode);\n  }\n\n  /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n  isExpanded(dataNode: T): boolean {\n    return this.expansionModel.isSelected(dataNode);\n  }\n\n  /** Toggles a subtree rooted at `node` recursively. */\n  toggleDescendants(dataNode: T): void {\n    this.expansionModel.isSelected(dataNode)\n        ? this.collapseDescendants(dataNode)\n        : this.expandDescendants(dataNode);\n  }\n\n  /** Collapse all dataNodes in the tree. */\n  collapseAll(): void {\n    this.expansionModel.clear();\n  }\n\n  /** Expands a subtree rooted at given data node recursively. */\n  expandDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.select(...toBeProcessed);\n  }\n\n  /** Collapses a subtree rooted at given data node recursively. */\n  collapseDescendants(dataNode: T): void {\n    let toBeProcessed = [dataNode];\n    toBeProcessed.push(...this.getDescendants(dataNode));\n    this.expansionModel.deselect(...toBeProcessed);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseTreeControl} from './base-tree-control';\n\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nexport class FlatTreeControl<T> extends BaseTreeControl<T> {\n\n  /** Construct with flat tree data node functions getLevel and isExpandable. */\n  constructor(public getLevel: (dataNode: T) => number,\n              public isExpandable: (dataNode: T) => boolean) {\n    super();\n  }\n\n  /**\n   * Gets a list of the data node's subtree of descendent data nodes.\n   *\n   * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n   * with correct levels.\n   */\n  getDescendants(dataNode: T): T[] {\n    const startIndex = this.dataNodes.indexOf(dataNode);\n    const results: T[] = [];\n\n    // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n    // The level of descendants of a tree node must be greater than the level of the given\n    // tree node.\n    // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n    // If we reach a node whose level is greater than the level of the tree node, we hit a\n    // sibling of an ancestor.\n    for (let i = startIndex + 1;\n        i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]);\n        i++) {\n      results.push(this.dataNodes[i]);\n    }\n    return results;\n  }\n\n  /**\n   * Expands all data nodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n   * data nodes of the tree.\n   */\n  expandAll(): void {\n    this.expansionModel.select(...this.dataNodes);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Observable, isObservable} from 'rxjs';\nimport {take, filter} from 'rxjs/operators';\nimport {BaseTreeControl} from './base-tree-control';\n\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nexport class NestedTreeControl<T> extends BaseTreeControl<T> {\n\n  /** Construct with nested tree function getChildren. */\n  constructor(public getChildren: (dataNode: T) => (Observable<T[]> | T[] | undefined | null)) {\n    super();\n  }\n\n  /**\n   * Expands all dataNodes in the tree.\n   *\n   * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n   * data nodes of the tree.\n   */\n  expandAll(): void {\n    this.expansionModel.clear();\n    const allNodes = this.dataNodes.reduce((accumulator: T[], dataNode) =>\n        [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n    this.expansionModel.select(...allNodes);\n  }\n\n  /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n  getDescendants(dataNode: T): T[] {\n    const descendants: T[] = [];\n\n    this._getDescendants(descendants, dataNode);\n    // Remove the node itself\n    return descendants.splice(1);\n  }\n\n  /** A helper function to get descendants recursively. */\n  protected _getDescendants(descendants: T[], dataNode: T): void {\n    descendants.push(dataNode);\n    const childrenNodes = this.getChildren(dataNode);\n    if (Array.isArray(childrenNodes)) {\n      childrenNodes.forEach((child: T) => this._getDescendants(descendants, child));\n    } else if (isObservable(childrenNodes)) {\n      // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n      // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n      childrenNodes.pipe(take(1), filter(Boolean as () => boolean))\n          .subscribe(children => {\n            for (const child of children) {\n              this._getDescendants(descendants, child);\n            }\n          });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {Observable} from 'rxjs';\n\n/**\n * Tree control interface. User can implement TreeControl to expand/collapse dataNodes in the tree.\n * The CDKTree will use this TreeControl to expand/collapse a node.\n * User can also use it outside the `<cdk-tree>` to control the expansion status of the tree.\n */\nexport interface TreeControl<T> {\n  /** The saved tree nodes data for `expandAll` action. */\n  dataNodes: T[];\n\n  /** The expansion model */\n  expansionModel: SelectionModel<T>;\n\n  /** Whether the data node is expanded or collapsed. Return true if it's expanded. */\n  isExpanded(dataNode: T): boolean;\n\n  /** Get all descendants of a data node */\n  getDescendants(dataNode: T): any[];\n\n  /** Expand or collapse data node */\n  toggle(dataNode: T): void;\n\n  /** Expand one data node */\n  expand(dataNode: T): void;\n\n  /** Collapse one data node */\n  collapse(dataNode: T): void;\n\n  /** Expand all the dataNodes in the tree */\n  expandAll(): void;\n\n  /** Collapse all the dataNodes in the tree */\n  collapseAll(): void;\n\n  /** Toggle a data node by expand/collapse it and all its descendants */\n  toggleDescendants(dataNode: T): void;\n\n  /** Expand a data node and all its descendants */\n  expandDescendants(dataNode: T): void;\n\n  /** Collapse a data node and all its descendants */\n  collapseDescendants(dataNode: T): void;\n\n  /** Get depth of a given data node, return the level number. This is for flat tree node. */\n  readonly getLevel: (dataNode: T) => number;\n\n  /**\n   * Whether the data node is expandable. Returns true if expandable.\n   * This is for flat tree node.\n   */\n  readonly isExpandable: (dataNode: T) => boolean;\n\n  /** Gets a stream that emits whenever the given data node's children change. */\n  readonly getChildren: (dataNode: T) => Observable<T[]> | T[] | undefined | null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  Inject,\n  InjectionToken,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nexport const CDK_TREE_NODE_OUTLET_NODE = new InjectionToken<{}>('CDK_TREE_NODE_OUTLET_NODE');\n\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[cdkTreeNodeOutlet]'\n})\nexport class CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n\n/** Context provided to the tree node component. */\nexport class CdkTreeNodeOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n  selector: '[cdkTreeNodeDef]',\n  inputs: [\n    'when: cdkTreeNodeDefWhen'\n  ],\n})\nexport class CdkTreeNodeDef<T> {\n  /**\n   * Function that should return true if this node template should be used for the provided node\n   * data and index. If left undefined, this node will be considered the default node template to\n   * use when no other when functions return true for the data.\n   * For every node, there must be at least one when function that passes or an undefined to\n   * default.\n   */\n  when: (index: number, nodeData: T) => boolean;\n\n  /** @docs-private */\n  constructor(public template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nexport function getTreeNoValidDataSourceError() {\n  return Error(`A valid data source must be provided.`);\n}\n\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nexport function getTreeMultipleDefaultNodeDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nexport function getTreeMissingMatchingNodeDefError() {\n  return Error(`Could not find a matching node definition for the provided node data.`);\n}\n\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nexport function getTreeControlMissingError() {\n  return Error(`Could not find a tree control for the tree.`);\n}\n\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nexport function getTreeControlFunctionsMissingError() {\n  return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {CollectionViewer, DataSource, isDataSource} from '@angular/cdk/collections';\nimport {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  TrackByFunction\n} from '@angular/core';\nimport {\n  BehaviorSubject,\n  Observable,\n  of as observableOf,\n  Subject,\n  Subscription,\n  isObservable,\n} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {TreeControl} from './control/tree-control';\nimport {CdkTreeNodeDef, CdkTreeNodeOutletContext} from './node';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {\n  getTreeControlFunctionsMissingError,\n  getTreeControlMissingError,\n  getTreeMissingMatchingNodeDefError,\n  getTreeMultipleDefaultNodeDefsError,\n  getTreeNoValidDataSourceError\n} from './tree-errors';\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\n@Component({\n  selector: 'cdk-tree',\n  exportAs: 'cdkTree',\n  template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'cdk-tree',\n    'role': 'tree',\n  },\n  encapsulation: ViewEncapsulation.None,\n\n  // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n  // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n  // declared elsewhere, they are checked when their declaration points are checked.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class CdkTree<T> implements AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<T>;\n\n  /** Stores the node definition that does not have a when predicate. */\n  private _defaultNodeDef: CdkTreeNodeDef<T> | null;\n\n  /** Data subscription */\n  private _dataSubscription: Subscription | null;\n\n  /** Level of nodes */\n  private _levels: Map<T, number> = new Map<T, number>();\n\n  /**\n   * Provides a stream containing the latest data array to render. Influenced by the tree's\n   * stream of view window (what dataNodes are currently on screen).\n   * Data source can be an observable of data array, or a data array to render.\n   */\n  @Input()\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] { return this._dataSource; }\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  private _dataSource: DataSource<T> | Observable<T[]> | T[];\n\n  /** The tree controller */\n  @Input() treeControl: TreeControl<T>;\n\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n   * relative to the function to know if a node should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  @Input() trackBy: TrackByFunction<T>;\n\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(CdkTreeNodeOutlet, {static: true}) _nodeOutlet: CdkTreeNodeOutlet;\n\n  /** The tree node template for the tree */\n  @ContentChildren(CdkTreeNodeDef, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n\n  // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n  //     Remove the MAX_VALUE in viewChange\n  /**\n   * Stream containing the latest information on what rows are being displayed on screen.\n   * Can be used by the data source to as a heuristic of what data should be provided.\n   */\n  viewChange =\n    new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n\n  constructor(private _differs: IterableDiffers,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this._dataDiffer = this._differs.find([]).create(this.trackBy);\n    if (!this.treeControl) {\n      throw getTreeControlMissingError();\n    }\n  }\n\n  ngOnDestroy() {\n    this._nodeOutlet.viewContainer.clear();\n\n    this.viewChange.complete();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n      (this.dataSource as DataSource<T>).disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n  }\n\n  ngAfterContentChecked() {\n    const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n    if (defaultNodeDefs.length > 1) {\n      throw getTreeMultipleDefaultNodeDefsError();\n    }\n    this._defaultNodeDef = defaultNodeDefs[0];\n\n    if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n\n\n  // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n  //     and nested trees.\n\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the node outlet. Otherwise start listening for new data.\n   */\n  private _switchDataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    if (this._dataSource && typeof (this._dataSource as DataSource<T>).disconnect === 'function') {\n      (this.dataSource as DataSource<T>).disconnect(this);\n    }\n\n    if (this._dataSubscription) {\n      this._dataSubscription.unsubscribe();\n      this._dataSubscription = null;\n    }\n\n    // Remove the all dataNodes if there is now no data source\n    if (!dataSource) {\n      this._nodeOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n    if (this._nodeDefs) {\n      this._observeRenderChanges();\n    }\n  }\n\n  /** Set up a subscription for the data provided by the data source. */\n  private _observeRenderChanges() {\n    let dataStream: Observable<T[] | ReadonlyArray<T>> | undefined;\n\n    if (isDataSource(this._dataSource)) {\n      dataStream = this._dataSource.connect(this);\n    } else if (isObservable(this._dataSource)) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = observableOf(this._dataSource);\n    }\n\n    if (dataStream) {\n      this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n        .subscribe(data => this.renderNodeChanges(data));\n    } else {\n      throw getTreeNoValidDataSourceError();\n    }\n  }\n\n  /** Check for changes made in the data and render each change (node added/removed/moved). */\n  renderNodeChanges(data: T[] | ReadonlyArray<T>, dataDiffer: IterableDiffer<T> = this._dataDiffer,\n                    viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer,\n                    parentData?: T) {\n    const changes = dataDiffer.diff(data);\n    if (!changes) { return; }\n\n    changes.forEachOperation((item: IterableChangeRecord<T>,\n                              adjustedPreviousIndex: number | null,\n                              currentIndex: number | null) => {\n        if (item.previousIndex == null) {\n          this.insertNode(data[currentIndex!], currentIndex!, viewContainer, parentData);\n        } else if (currentIndex == null) {\n          viewContainer.remove(adjustedPreviousIndex!);\n          this._levels.delete(item.item);\n        } else {\n          const view = viewContainer.get(adjustedPreviousIndex!);\n          viewContainer.move(view!, currentIndex);\n        }\n      });\n\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /**\n   * Finds the matching node definition that should be used for this node data. If there is only\n   * one node definition, it is returned. Otherwise, find the node definition that has a when\n   * predicate that returns true with the data. If none return true, return the default node\n   * definition.\n   */\n  _getNodeDef(data: T, i: number): CdkTreeNodeDef<T> {\n    if (this._nodeDefs.length === 1) { return this._nodeDefs.first; }\n\n    const nodeDef =\n      this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n    if (!nodeDef) { throw getTreeMissingMatchingNodeDefError(); }\n\n    return nodeDef;\n  }\n\n  /**\n   * Create the embedded view for the data node template and place it in the correct index location\n   * within the data node view container.\n   */\n  insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T) {\n    const node = this._getNodeDef(nodeData, index);\n\n    // Node context that will be provided to created embedded view\n    const context = new CdkTreeNodeOutletContext<T>(nodeData);\n\n    // If the tree is flat tree, then use the `getLevel` function in flat tree control\n    // Otherwise, use the level of parent node.\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n      context.level = this._levels.get(parentData)! + 1;\n    } else {\n      context.level = 0;\n    }\n    this._levels.set(nodeData, context.level);\n\n    // Use default tree nodeOutlet, or nested node's nodeOutlet\n    const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n    container.createEmbeddedView(node.template, context, index);\n\n    // Set the data to just created `CdkTreeNode`.\n    // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n    //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n    if (CdkTreeNode.mostRecentTreeNode) {\n      CdkTreeNode.mostRecentTreeNode.data = nodeData;\n    }\n  }\n}\n\n\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\n@Directive({\n  selector: 'cdk-tree-node',\n  exportAs: 'cdkTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'cdk-tree-node',\n  },\n})\nexport class CdkTreeNode<T> implements FocusableOption, OnDestroy {\n  /**\n   * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n   * in `CdkTree` and set the data to it.\n   */\n  static mostRecentTreeNode: CdkTreeNode<any> | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _destroyed = new Subject<void>();\n\n  /** Emits when the node's data has changed. */\n  _dataChanges = new Subject<void>();\n\n  /** The tree node's data. */\n  get data(): T { return this._data; }\n  set data(value: T) {\n    if (value !== this._data) {\n      this._data = value;\n      this._setRoleFromData();\n      this._dataChanges.next();\n    }\n  }\n  protected _data: T;\n\n  get isExpanded(): boolean {\n    return this._tree.treeControl.isExpanded(this._data);\n  }\n\n  get level(): number {\n    return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n  }\n\n  /**\n   * The role of the node should be 'group' if it's an internal node,\n   * and 'treeitem' if it's a leaf node.\n   */\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>) {\n    CdkTreeNode.mostRecentTreeNode = this as CdkTreeNode<T>;\n  }\n\n  ngOnDestroy() {\n    // If this is the last tree node being destroyed,\n    // clear out the reference to avoid leaking memory.\n    if (CdkTreeNode.mostRecentTreeNode === this) {\n      CdkTreeNode.mostRecentTreeNode = null;\n    }\n\n    this._dataChanges.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Focuses the menu item. Implements for FocusableOption. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  protected _setRoleFromData(): void {\n    if (this._tree.treeControl.isExpandable) {\n      this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n    } else {\n      if (!this._tree.treeControl.getChildren) {\n        throw getTreeControlFunctionsMissingError();\n      }\n      const childrenNodes = this._tree.treeControl.getChildren(this._data);\n      if (Array.isArray(childrenNodes)) {\n        this._setRoleFromChildren(childrenNodes as T[]);\n      } else if (isObservable(childrenNodes)) {\n        childrenNodes.pipe(takeUntil(this._destroyed))\n            .subscribe(children => this._setRoleFromChildren(children));\n      }\n    }\n  }\n\n  protected _setRoleFromChildren(children: T[]) {\n    this.role = children && children.length ? 'group' : 'treeitem';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {isObservable} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from './outlet';\nimport {CdkTree, CdkTreeNode} from './tree';\nimport {getTreeControlFunctionsMissingError} from './tree-errors';\n\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\n@Directive({\n  selector: 'cdk-nested-tree-node',\n  exportAs: 'cdkNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'cdk-tree-node cdk-nested-tree-node',\n  },\n  providers: [\n    {provide: CdkTreeNode, useExisting: CdkNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode}\n  ]\n})\nexport class CdkNestedTreeNode<T> extends CdkTreeNode<T> implements AfterContentInit, OnDestroy {\n  /** Differ used to find the changes in the data provided by the data source. */\n  private _dataDiffer: IterableDiffer<T>;\n\n  /** The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`. */\n  protected _children: T[];\n\n  /** The children node placeholder. */\n  @ContentChildren(CdkTreeNodeOutlet, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  nodeOutlet: QueryList<CdkTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers) {\n    super(_elementRef, _tree);\n  }\n\n  ngAfterContentInit() {\n    this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n    if (!this._tree.treeControl.getChildren) {\n      throw getTreeControlFunctionsMissingError();\n    }\n    const childrenNodes = this._tree.treeControl.getChildren(this.data);\n    if (Array.isArray(childrenNodes)) {\n      this.updateChildrenNodes(childrenNodes as T[]);\n    } else if (isObservable(childrenNodes)) {\n      childrenNodes.pipe(takeUntil(this._destroyed))\n        .subscribe(result => this.updateChildrenNodes(result));\n    }\n    this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n        .subscribe(() => this.updateChildrenNodes());\n  }\n\n  ngOnDestroy() {\n    this._clear();\n    super.ngOnDestroy();\n  }\n\n  /** Add children dataNodes to the NodeOutlet */\n  protected updateChildrenNodes(children?: T[]): void {\n    const outlet = this._getNodeOutlet();\n    if (children) {\n      this._children = children;\n    }\n    if (outlet && this._children) {\n      const viewContainer = outlet.viewContainer;\n      this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n    } else {\n      // Reset the data differ if there's no children nodes displayed\n      this._dataDiffer.diff([]);\n    }\n  }\n\n  /** Clear the children dataNodes. */\n  protected _clear(): void {\n    const outlet = this._getNodeOutlet();\n    if (outlet) {\n      outlet.viewContainer.clear();\n      this._dataDiffer.diff([]);\n    }\n  }\n\n  /** Gets the outlet for the current node. */\n  private _getNodeOutlet() {\n    const outlets = this.nodeOutlet;\n\n    // Note that since we use `descendants: true` on the query, we have to ensure\n    // that we don't pick up the outlet of a child node by accident.\n    return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, Input, OnDestroy, Optional, Renderer2} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\n@Directive({\n  selector: '[cdkTreeNodePadding]',\n})\nexport class CdkTreeNodePadding<T> implements OnDestroy {\n  /** Current padding value applied to the element. Used to avoid unnecessarily hitting the DOM. */\n  private _currentPadding: string|null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** CSS units used for the indentation value. */\n  indentUnits = 'px';\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('cdkTreeNodePadding')\n  get level(): number { return this._level; }\n  set level(value: number) {\n    // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n    // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n    // they set 0 explicitly.\n    this._level = coerceNumberProperty(value, null)!;\n    this._setPadding();\n  }\n  _level: number;\n\n  /**\n   * The indent for each level. Can be a number or a CSS string.\n   * Default number 40px from material design menu sub-menu spec.\n   */\n  @Input('cdkTreeNodePaddingIndent')\n  get indent(): number | string { return this._indent; }\n  set indent(indent: number | string) {\n    let value = indent;\n    let units = 'px';\n\n    if (typeof indent === 'string') {\n      const parts = indent.split(cssUnitPattern);\n      value = parts[0];\n      units = parts[1] || units;\n    }\n\n    this.indentUnits = units;\n    this._indent = coerceNumberProperty(value);\n    this._setPadding();\n  }\n  _indent: number = 40;\n\n  constructor(private _treeNode: CdkTreeNode<T>,\n              private _tree: CdkTree<T>,\n              /**\n               * @deprecated _renderer parameter no longer being used. To be removed.\n               * @breaking-change 11.0.0\n               */\n              _renderer: Renderer2,\n              private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {\n    this._setPadding();\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n    }\n\n    // In Ivy the indentation binding might be set before the tree node's data has been added,\n    // which means that we'll miss the first render. We have to subscribe to changes in the\n    // data to ensure that everything is up to date.\n    _treeNode._dataChanges.subscribe(() => this._setPadding());\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n  _paddingIndent(): string|null {\n    const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n      ? this._tree.treeControl.getLevel(this._treeNode.data)\n      : null;\n    const level = this._level == null ? nodeLevel : this._level;\n    return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n  }\n\n  _setPadding(forceChange = false) {\n    const padding = this._paddingIndent();\n\n    if (padding !== this._currentPadding || forceChange) {\n      const element = this._element.nativeElement;\n      const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n      const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n      element.style[paddingProp] = padding || '';\n      element.style[resetProp] = '';\n      this._currentPadding = padding;\n    }\n  }\n\n  static ngAcceptInputType_level: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, HostListener, Input} from '@angular/core';\n\nimport {CdkTree, CdkTreeNode} from './tree';\n\n/**\n * Node toggle to expand/collapse the node.\n */\n@Directive({selector: '[cdkTreeNodeToggle]'})\nexport class CdkTreeNodeToggle<T> {\n  /** Whether expand/collapse the node recursively. */\n  @Input('cdkTreeNodeToggleRecursive')\n  get recursive(): boolean { return this._recursive; }\n  set recursive(value: boolean) { this._recursive = coerceBooleanProperty(value); }\n  protected _recursive = false;\n\n  constructor(protected _tree: CdkTree<T>,\n              protected _treeNode: CdkTreeNode<T>) {}\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _toggle(event: Event): void {\n    this.recursive\n      ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n      : this._tree.treeControl.toggle(this._treeNode.data);\n\n    event.stopPropagation();\n  }\n\n  static ngAcceptInputType_recursive: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {NgModule} from '@angular/core';\nimport {CdkTreeNodeOutlet} from './outlet';\nimport {CdkTreeNodePadding} from './padding';\nimport {CdkTreeNodeToggle} from './toggle';\nimport {CdkTree, CdkTreeNode} from './tree';\nimport {CdkTreeNodeDef} from './node';\nimport {CdkNestedTreeNode} from './nested-node';\n\nconst EXPORTED_DECLARATIONS = [\n  CdkNestedTreeNode,\n  CdkTreeNodeDef,\n  CdkTreeNodePadding,\n  CdkTreeNodeToggle,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeOutlet,\n];\n\n@NgModule({\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n  providers: [FocusMonitor, CdkTreeNodeDef]\n})\nexport class CdkTreeModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}