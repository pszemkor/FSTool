{"version":3,"file":"grid-list__testing.js","sources":["../../../../../../../src/material/grid-list/testing/grid-tile-harness.ts","../../../../../../../src/material/grid-list/testing/grid-list-harness.ts","../../../../../../../src/material/grid-list/testing/public-api.ts","../../../../../../../src/material/grid-list/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {GridTileHarnessFilters} from './grid-list-harness-filters';\n\n/** Harness for interacting with a standard `MatGridTitle` in tests. */\nexport class MatGridTileHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatGridTile` instance. */\n  static hostSelector = '.mat-grid-tile';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatGridTileHarness`\n   * that meets certain criteria.\n   * @param options Options for filtering which dialog instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: GridTileHarnessFilters = {}): HarnessPredicate<MatGridTileHarness> {\n    return new HarnessPredicate(MatGridTileHarness, options)\n        .addOption(\n            'headerText', options.headerText,\n            (harness, pattern) => HarnessPredicate.stringMatches(harness.getHeaderText(), pattern))\n        .addOption(\n            'footerText', options.footerText,\n            (harness, pattern) => HarnessPredicate.stringMatches(harness.getFooterText(), pattern));\n  }\n\n  private _header = this.locatorForOptional('.mat-grid-tile-header');\n  private _footer = this.locatorForOptional('.mat-grid-tile-footer');\n  private _avatar = this.locatorForOptional('.mat-grid-avatar');\n\n  /** Gets the amount of rows that the grid-tile takes up. */\n  async getRowspan(): Promise<number> {\n    return Number(await (await this.host()).getAttribute('rowspan'));\n  }\n\n  /** Gets the amount of columns that the grid-tile takes up. */\n  async getColspan(): Promise<number> {\n    return Number(await (await this.host()).getAttribute('colspan'));\n  }\n\n  /** Whether the grid-tile has a header. */\n  async hasHeader(): Promise<boolean> {\n    return (await this._header()) !== null;\n  }\n\n  /** Whether the grid-tile has a footer. */\n  async hasFooter(): Promise<boolean> {\n    return (await this._footer()) !== null;\n  }\n\n  /** Whether the grid-tile has an avatar. */\n  async hasAvatar(): Promise<boolean> {\n    return (await this._avatar()) !== null;\n  }\n\n  /** Gets the text of the header if present. */\n  async getHeaderText(): Promise<string|null> {\n    // For performance reasons, we do not use \"hasHeader\" as\n    // we would then need to query twice for the header.\n    const headerEl = await this._header();\n    return headerEl ? headerEl.text() : null;\n  }\n\n  /** Gets the text of the footer if present. */\n  async getFooterText(): Promise<string|null> {\n    // For performance reasons, we do not use \"hasFooter\" as\n    // we would then need to query twice for the footer.\n    const headerEl = await this._footer();\n    return headerEl ? headerEl.text() : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {ÉµTileCoordinator as TileCoordinator} from '@angular/material/grid-list';\nimport {GridListHarnessFilters, GridTileHarnessFilters} from './grid-list-harness-filters';\nimport {MatGridTileHarness} from './grid-tile-harness';\n\n/** Harness for interacting with a standard `MatGridList` in tests. */\nexport class MatGridListHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatGridList` instance. */\n  static hostSelector = '.mat-grid-list';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatGridListHarness`\n   * that meets certain criteria.\n   * @param options Options for filtering which dialog instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: GridListHarnessFilters = {}): HarnessPredicate<MatGridListHarness> {\n    return new HarnessPredicate(MatGridListHarness, options);\n  }\n\n  /**\n   * Tile coordinator that is used by the \"MatGridList\" for computing\n   * positions of tiles. We leverage the coordinator to provide an API\n   * for retrieving tiles based on visual tile positions.\n   */\n  private _tileCoordinator = new TileCoordinator();\n\n  /** Gets all tiles of the grid-list. */\n  async getTiles(filters: GridTileHarnessFilters = {}): Promise<MatGridTileHarness[]> {\n    return await this.locatorForAll(MatGridTileHarness.with(filters))();\n  }\n\n  /** Gets the amount of columns of the grid-list. */\n  async getColumns(): Promise<number> {\n    return Number(await (await this.host()).getAttribute('cols'));\n  }\n\n  /**\n   * Gets a tile of the grid-list that is located at the given location.\n   * @param row Zero-based row index.\n   * @param column Zero-based column index.\n   */\n  async getTileAtPosition({row, column}: {row: number, column: number}):\n      Promise<MatGridTileHarness> {\n    const [tileHarnesses, columns] = await Promise.all([this.getTiles(), this.getColumns()]);\n    const tileSpans = tileHarnesses.map(t => Promise.all([t.getColspan(), t.getRowspan()]));\n    const tiles = (await Promise.all(tileSpans)).map(([colspan, rowspan]) => ({colspan, rowspan}));\n    // Update the tile coordinator to reflect the current column amount and\n    // rendered tiles. We update upon every call of this method since we do not\n    // know if tiles have been added, removed or updated (in terms of rowspan/colspan).\n    this._tileCoordinator.update(columns, tiles);\n    // The tile coordinator respects the colspan and rowspan for calculating the positions\n    // of tiles, but it does not create multiple position entries if a tile spans over multiple\n    // columns or rows. We want to provide an API where developers can retrieve a tile based on\n    // any position that lies within the visual tile boundaries. For example: If a tile spans\n    // over two columns, then the same tile should be returned for either column indices.\n    for (let i = 0; i < this._tileCoordinator.positions.length; i++) {\n      const position = this._tileCoordinator.positions[i];\n      const {rowspan, colspan} = tiles[i];\n      // Return the tile harness if the given position visually resolves to the tile.\n      if (column >= position.col && column <= position.col + colspan - 1 && row >= position.row &&\n          row <= position.row + rowspan - 1) {\n        return tileHarnesses[i];\n      }\n    }\n    throw Error('Could not find tile at given position.');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './grid-tile-harness';\nexport * from './grid-list-harness';\nexport * from './grid-list-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":["TileCoordinator"],"mappings":"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"}