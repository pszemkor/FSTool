{"version":3,"file":"expansion__testing.js","sources":["../../../../../../../src/material/expansion/testing/expansion-harness.ts","../../../../../../../src/material/expansion/testing/accordion-harness.ts","../../../../../../../src/material/expansion/testing/public-api.ts","../../../../../../../src/material/expansion/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessLoader, HarnessPredicate} from '@angular/cdk/testing';\nimport {ExpansionPanelHarnessFilters} from './expansion-harness-filters';\n\nconst EXPANSION_PANEL_CONTENT_SELECTOR = '.mat-expansion-panel-content';\n\n/** Harness for interacting with a standard mat-expansion-panel in tests. */\nexport class MatExpansionPanelHarness extends ComponentHarness {\n  static hostSelector = '.mat-expansion-panel';\n\n  private _header = this.locatorFor('.mat-expansion-panel-header');\n  private _title = this.locatorForOptional('.mat-expansion-panel-header-title');\n  private _description = this.locatorForOptional('.mat-expansion-panel-header-description');\n  private _expansionIndicator = this.locatorForOptional('.mat-expansion-indicator');\n  private _content = this.locatorFor(EXPANSION_PANEL_CONTENT_SELECTOR);\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for an expansion-panel\n   * with specific attributes.\n   * @param options Options for narrowing the search:\n   *   - `title` finds an expansion-panel with a specific title text.\n   *   - `description` finds an expansion-panel with a specific description text.\n   *   - `expanded` finds an expansion-panel that is currently expanded.\n   *   - `disabled` finds an expansion-panel that is disabled.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: ExpansionPanelHarnessFilters = {}):\n      HarnessPredicate<MatExpansionPanelHarness> {\n    return new HarnessPredicate(MatExpansionPanelHarness, options)\n        .addOption(\n            'title', options.title,\n            (harness, title) => HarnessPredicate.stringMatches(harness.getTitle(), title))\n        .addOption(\n            'description', options.description,\n            (harness, description) =>\n                HarnessPredicate.stringMatches(harness.getDescription(), description))\n        .addOption(\n            'content', options.content,\n            (harness, content) => HarnessPredicate.stringMatches(harness.getTextContent(), content))\n        .addOption(\n            'expanded', options.expanded,\n            async (harness, expanded) => (await harness.isExpanded()) === expanded)\n        .addOption(\n            'disabled', options.disabled,\n            async (harness, disabled) => (await harness.isDisabled()) === disabled);\n  }\n\n  /** Whether the panel is expanded. */\n  async isExpanded(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-expanded');\n  }\n\n  /**\n   * Gets the title text of the panel.\n   * @returns Title text or `null` if no title is set up.\n   */\n  async getTitle(): Promise<string|null> {\n    const titleEl = await this._title();\n    return titleEl ? titleEl.text() : null;\n  }\n\n  /**\n   * Gets the description text of the panel.\n   * @returns Description text or `null` if no description is set up.\n   */\n  async getDescription(): Promise<string|null> {\n    const descriptionEl = await this._description();\n    return descriptionEl ? descriptionEl.text() : null;\n  }\n\n  /** Whether the panel is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return await (await this._header()).getAttribute('aria-disabled') === 'true';\n  }\n\n  /**\n   * Toggles the expanded state of the panel by clicking on the panel\n   * header. This method will not work if the panel is disabled.\n   */\n  async toggle(): Promise<void> {\n    await (await this._header()).click();\n  }\n\n  /** Expands the expansion panel if collapsed. */\n  async expand(): Promise<void> {\n    if (!await this.isExpanded()) {\n      await this.toggle();\n    }\n  }\n\n  /** Collapses the expansion panel if expanded. */\n  async collapse(): Promise<void> {\n    if (await this.isExpanded()) {\n      await this.toggle();\n    }\n  }\n\n  /** Gets the text content of the panel. */\n  async getTextContent(): Promise<string> {\n    return (await this._content()).text();\n  }\n\n  /**\n   * Gets a `HarnessLoader` that can be used to load harnesses for\n   * components within the panel's content area.\n   */\n  async getHarnessLoaderForContent(): Promise<HarnessLoader> {\n    return this.locatorFactory.harnessLoaderFor(EXPANSION_PANEL_CONTENT_SELECTOR);\n  }\n\n  /** Focuses the panel. */\n  async focus(): Promise<void> {\n    return (await this._header()).focus();\n  }\n\n  /** Blurs the panel. */\n  async blur(): Promise<void> {\n    return (await this._header()).blur();\n  }\n\n  /** Whether the panel has a toggle indicator displayed. */\n  async hasToggleIndicator(): Promise<boolean> {\n    return (await this._expansionIndicator()) !== null;\n  }\n\n  /** Gets the position of the toggle indicator. */\n  async getToggleIndicatorPosition(): Promise<'before'|'after'> {\n    // By default the expansion indicator will show \"after\" the panel header content.\n    if (await (await this._header()).hasClass('mat-expansion-toggle-indicator-before')) {\n      return 'before';\n    }\n    return 'after';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {MatExpansionPanelHarness} from './expansion-harness';\nimport {AccordionHarnessFilters, ExpansionPanelHarnessFilters} from './expansion-harness-filters';\n\n/** Harness for interacting with a standard mat-accordion in tests. */\nexport class MatAccordionHarness extends ComponentHarness {\n  static hostSelector = '.mat-accordion';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for an accordion\n   * with specific attributes.\n   * @param options Options for narrowing the search.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: AccordionHarnessFilters = {}): HarnessPredicate<MatAccordionHarness> {\n    return new HarnessPredicate(MatAccordionHarness, options);\n  }\n\n  /** Gets all expansion panels which are part of the accordion. */\n  async getExpansionPanels(filter: ExpansionPanelHarnessFilters = {}):\n      Promise<MatExpansionPanelHarness[]> {\n    return this.locatorForAll(MatExpansionPanelHarness.with(filter))();\n  }\n\n  /** Whether the accordion allows multiple expanded panels simultaneously. */\n  async isMulti(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-accordion-multi');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './accordion-harness';\nexport * from './expansion-harness';\nexport * from './expansion-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}