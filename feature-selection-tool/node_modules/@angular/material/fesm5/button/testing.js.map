{"version":3,"file":"button__testing.js","sources":["../../../../../../../src/material/button/testing/button-harness.ts","../../../../../../../src/material/button/testing/public-api.ts","../../../../../../../src/material/button/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ButtonHarnessFilters} from './button-harness-filters';\n\n\n/** Harness for interacting with a standard mat-button in tests. */\nexport class MatButtonHarness extends ComponentHarness {\n  // TODO(jelbourn) use a single class, like `.mat-button-base`\n  /** The selector for the host element of a `MatButton` instance. */\n  static hostSelector = [\n    '[mat-button]',\n    '[mat-raised-button]',\n    '[mat-flat-button]',\n    '[mat-icon-button]',\n    '[mat-stroked-button]',\n    '[mat-fab]',\n    '[mat-mini-fab]',\n  ].join(',');\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatButtonHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which button instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: ButtonHarnessFilters = {}): HarnessPredicate<MatButtonHarness> {\n    return new HarnessPredicate(MatButtonHarness, options)\n        .addOption('text', options.text,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text));\n  }\n\n  /** Clicks the button. */\n  async click(): Promise<void> {\n    return (await this.host()).click();\n  }\n\n  /** Whether the button is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Gets the button's label text. */\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Focuses the button. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the button. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './button-harness';\nexport * from './button-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;AAAA;;;;;;;AAaA;AACA;IAAsC,oCAAgB;IAAtD;;KAkDC;;;;;;;IA/BQ,qBAAI,GAAX,UAAY,OAAkC;QAAlC,wBAAA,EAAA,YAAkC;QAC5C,OAAO,IAAI,gBAAgB,CAAC,gBAAgB,EAAE,OAAO,CAAC;aACjD,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,EAC3B,UAAC,OAAO,EAAE,IAAI,IAAK,OAAA,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,GAAA,CAAC,CAAC;KACrF;;IAGK,gCAAK,GAAX;;;;4BACU,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;4BAAzB,sBAAO,CAAC,SAAiB,EAAE,KAAK,EAAE,EAAC;;;;KACpC;;IAGK,qCAAU,GAAhB;;;;;4BACoB,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;wBAA7B,QAAQ,GAAG,CAAC,SAAiB,EAAE,YAAY,CAAC,UAAU,CAAC;wBACtD,KAAA,qBAAqB,CAAA;wBAAC,qBAAM,QAAQ,EAAA;4BAA3C,sBAAO,kBAAsB,SAAc,EAAC,EAAC;;;;KAC9C;;IAGK,kCAAO,GAAb;;;;4BACU,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;4BAAzB,sBAAO,CAAC,SAAiB,EAAE,IAAI,EAAE,EAAC;;;;KACnC;;IAGK,gCAAK,GAAX;;;;4BACU,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;4BAAzB,sBAAO,CAAC,SAAiB,EAAE,KAAK,EAAE,EAAC;;;;KACpC;;IAGK,+BAAI,GAAV;;;;4BACU,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;4BAAzB,sBAAO,CAAC,SAAiB,EAAE,IAAI,EAAE,EAAC;;;;KACnC;;;IA9CM,6BAAY,GAAG;QACpB,cAAc;QACd,qBAAqB;QACrB,mBAAmB;QACnB,mBAAmB;QACnB,sBAAsB;QACtB,WAAW;QACX,gBAAgB;KACjB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAuCd,uBAAC;CAAA,CAlDqC,gBAAgB;;ACdtD;;;;;;GAMG;;ACNH;;;;;;GAMG;;;;"}