{"version":3,"file":"checkbox__testing.js","sources":["../../../../../../../src/material/checkbox/testing/checkbox-harness.ts","../../../../../../../src/material/checkbox/testing/public-api.ts","../../../../../../../src/material/checkbox/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {CheckboxHarnessFilters} from './checkbox-harness-filters';\n\n/** Harness for interacting with a standard mat-checkbox in tests. */\nexport class MatCheckboxHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatCheckbox` instance. */\n  static hostSelector = 'mat-checkbox';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatCheckboxHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which checkbox instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: CheckboxHarnessFilters = {}): HarnessPredicate<MatCheckboxHarness> {\n    return new HarnessPredicate(MatCheckboxHarness, options)\n        .addOption(\n            'label', options.label,\n            (harness, label) => HarnessPredicate.stringMatches(harness.getLabelText(), label))\n        // We want to provide a filter option for \"name\" because the name of the checkbox is\n        // only set on the underlying input. This means that it's not possible for developers\n        // to retrieve the harness of a specific checkbox with name through a CSS selector.\n        .addOption('name', options.name, async (harness, name) => await harness.getName() === name);\n  }\n\n  private _label = this.locatorFor('.mat-checkbox-label');\n  private _input = this.locatorFor('input');\n  private _inputContainer = this.locatorFor('.mat-checkbox-inner-container');\n\n  /** Whether the checkbox is checked. */\n  async isChecked(): Promise<boolean> {\n    const checked = (await this._input()).getProperty('checked');\n    return coerceBooleanProperty(await checked);\n  }\n\n  /** Whether the checkbox is in an indeterminate state. */\n  async isIndeterminate(): Promise<boolean> {\n    const indeterminate = (await this._input()).getProperty('indeterminate');\n    return coerceBooleanProperty(await indeterminate);\n  }\n\n  /** Whether the checkbox is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this._input()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Whether the checkbox is required. */\n  async isRequired(): Promise<boolean> {\n    const required = (await this._input()).getProperty('required');\n    return coerceBooleanProperty(await required);\n  }\n\n  /** Whether the checkbox is valid. */\n  async isValid(): Promise<boolean> {\n    const invalid = (await this.host()).hasClass('ng-invalid');\n    return !(await invalid);\n  }\n\n  /** Gets the checkbox's name. */\n  async getName(): Promise<string|null> {\n    return (await this._input()).getAttribute('name');\n  }\n\n  /** Gets the checkbox's value. */\n  async getValue(): Promise<string|null> {\n    return (await this._input()).getProperty('value');\n  }\n\n  /** Gets the checkbox's aria-label. */\n  async getAriaLabel(): Promise<string|null> {\n    return (await this._input()).getAttribute('aria-label');\n  }\n\n  /** Gets the checkbox's aria-labelledby. */\n  async getAriaLabelledby(): Promise<string|null> {\n    return (await this._input()).getAttribute('aria-labelledby');\n  }\n\n  /** Gets the checkbox's label text. */\n  async getLabelText(): Promise<string> {\n    return (await this._label()).text();\n  }\n\n  /** Focuses the checkbox. */\n  async focus(): Promise<void> {\n    return (await this._input()).focus();\n  }\n\n  /** Blurs the checkbox. */\n  async blur(): Promise<void> {\n    return (await this._input()).blur();\n  }\n\n  /**\n   * Toggles the checked state of the checkbox.\n   *\n   * Note: This attempts to toggle the checkbox as a user would, by clicking it. Therefore if you\n   * are using `MAT_CHECKBOX_CLICK_ACTION` to change the behavior on click, calling this method\n   * might not have the expected result.\n   */\n  async toggle(): Promise<void> {\n    return (await this._inputContainer()).click();\n  }\n\n  /**\n   * Puts the checkbox in a checked state by toggling it if it is currently unchecked, or doing\n   * nothing if it is already checked.\n   *\n   * Note: This attempts to check the checkbox as a user would, by clicking it. Therefore if you\n   * are using `MAT_CHECKBOX_CLICK_ACTION` to change the behavior on click, calling this method\n   * might not have the expected result.\n   */\n  async check(): Promise<void> {\n    if (!(await this.isChecked())) {\n      await this.toggle();\n    }\n  }\n\n  /**\n   * Puts the checkbox in an unchecked state by toggling it if it is currently checked, or doing\n   * nothing if it is already unchecked.\n   *\n   * Note: This attempts to uncheck the checkbox as a user would, by clicking it. Therefore if you\n   * are using `MAT_CHECKBOX_CLICK_ACTION` to change the behavior on click, calling this method\n   * might not have the expected result.\n   */\n  async uncheck(): Promise<void> {\n    if (await this.isChecked()) {\n      await this.toggle();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './checkbox-harness';\nexport * from './checkbox-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}