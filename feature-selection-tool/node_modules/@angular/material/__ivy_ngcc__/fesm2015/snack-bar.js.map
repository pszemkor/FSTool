{"version":3,"file":"snack-bar.js","sources":["../../../../../../src/material/snack-bar/snack-bar-ref.ts","../../../../../../src/material/snack-bar/snack-bar-config.ts","../../../../../../src/material/snack-bar/simple-snack-bar.ts","../../../../../../src/material/snack-bar/snack-bar-animations.ts","../../../../../../src/material/snack-bar/snack-bar-container.ts","../../../../../../src/material/snack-bar/snack-bar-module.ts","../../../../../../src/material/snack-bar/snack-bar.ts","../../../../../../src/material/snack-bar/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /**\n   * The view container that serves as the parent for the snackbar for the purposes of dependency\n   * injection. Note: this does not affect where the snackbar is inserted in the DOM.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  DomPortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /**\n   * Attaches a DOM portal to the snack bar container.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = (portal: DomPortal) => {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachDomPortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n\n    // Mark this element with an 'exit' attribute to indicate that the snackbar has\n    // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n    // test harness.\n    this._elementRef.nativeElement.setAttribute('mat-exit', '');\n\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(\n      takeUntil(overlayRef.detachments())\n    ).subscribe(state => {\n      const classList = overlayRef.overlayElement.classList;\n      const className = 'mat-snack-bar-handset';\n      state.matches ? classList.add(className) : classList.remove(className);\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}