{"version":3,"file":"radio.js","sources":["../../../../../../src/material/radio/radio.ts","../../../../../../src/material/radio/radio-module.ts","../../../../../../src/material/radio/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\n@Directive()\n// tslint:disable-next-line:class-name\nexport abstract class _MatRadioButtonBase extends _MatRadioButtonMixinBase implements OnInit,\n  AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._setDisabled(coerceBooleanProperty(value));\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              protected _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Sets the disabled state and marks for check if a change occurred. */\n  protected _setDisabled(value: boolean) {\n    if (this._disabled !== value) {\n      this._disabled = value;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  static ngAcceptInputType_checked: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.aria-describedby]': 'null',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonBase {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}