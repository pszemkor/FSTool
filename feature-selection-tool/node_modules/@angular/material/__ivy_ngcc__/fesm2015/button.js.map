{"version":3,"file":"button.js","sources":["../../../../../../src/material/button/button.ts","../../../../../../src/material/button/button-module.ts","../../../../../../src/material/button/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatButtonMixinBase: CanDisableRippleCtor & CanDisableCtor & CanColorCtor &\n    typeof MatButtonBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[attr.disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    'class': 'mat-focus-indicator',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is present in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (this._getHostElement() as HTMLElement).classList.add(attr);\n      }\n    }\n\n    // Add a class that applies to all buttons. This makes it easier to target if somebody\n    // wants to target all Material buttons. We do it here rather than `host` to ensure that\n    // the class is applied to derived classes.\n    elementRef.nativeElement.classList.add('mat-button-base');\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n/**\n * Material design anchor button.\n */\n@Component({\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    'class': 'mat-focus-indicator',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string) {\n    super(elementRef, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}