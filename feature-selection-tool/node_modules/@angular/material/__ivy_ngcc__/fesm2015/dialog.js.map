{"version":3,"file":"dialog.js","sources":["../../../../../../src/material/dialog/dialog-config.ts","../../../../../../src/material/dialog/dialog-animations.ts","../../../../../../src/material/dialog/dialog-container.ts","../../../../../../src/material/dialog/dialog-ref.ts","../../../../../../src/material/dialog/dialog.ts","../../../../../../src/material/dialog/dialog-content-directives.ts","../../../../../../src/material/dialog/dialog-module.ts","../../../../../../src/material/dialog/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, ComponentFactoryResolver} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Alternate `ComponentFactoryResolver` to use when resolving the associated component. */\n  componentFactoryResolver?: ComponentFactoryResolver;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', [\n    // Note: The `enter` animation transitions to `transform: none`, because for some reason\n    // specifying the transform explicitly, causes IE both to blur the dialog content and\n    // decimate the animation performance. Leaving it as `none` solves both issues.\n    state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n    state('enter', style({transform: 'none'})),\n    transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n        style({transform: 'none', opacity: 1}))),\n    transition('* => void, * => exit',\n        animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal,\n  DomPortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  private _document: Document;\n\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n    this._ariaLabelledBy = _config.ariaLabelledBy || null;\n    this._document = _document;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /**\n   * Attaches a DOM portal to the dialog container.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = (portal: DomPortal) => {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachDomPortal(portal);\n  }\n\n  /** Moves focus back into the dialog if it was moved out. */\n  _recaptureFocus() {\n    if (!this._containsFocus()) {\n      const focusWasTrapped = this._getFocusTrap().focusInitialElement();\n\n      if (!focusWasTrapped) {\n        this._elementRef.nativeElement.focus();\n      }\n    }\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._getFocusTrap().focusInitialElementWhenReady();\n    } else if (!this._containsFocus()) {\n      // Otherwise ensure that focus is on the dialog container. It's possible that a different\n      // component tried to move focus while the open animation was running. See:\n      // https://github.com/angular/components/issues/16215. Note that we only want to do this\n      // if the focus isn't inside the dialog already, because it's possible that the consumer\n      // turned off `autoFocus` in order to move focus themselves.\n      this._elementRef.nativeElement.focus();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      const activeElement = this._document.activeElement;\n      const element = this._elementRef.nativeElement;\n\n      // Make sure that focus is still inside the dialog or is on the body (usually because a\n      // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n      // the consumer moved it themselves before the animation was done, in which case we shouldn't\n      // do anything.\n      if (!activeElement || activeElement === this._document.body || activeElement === element ||\n        element.contains(activeElement)) {\n        toFocus.focus();\n      }\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Returns whether focus is inside the dialog. */\n  private _containsFocus() {\n    const element = this._elementRef.nativeElement;\n    const activeElement = this._document.activeElement;\n    return element === activeElement || element.contains(activeElement);\n  }\n\n  /** Gets the focus trap associated with the dialog. */\n  private _getFocusTrap() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    return this._focusTrap;\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/** Possible states of the lifecycle of a dialog. */\nexport const enum MatDialogState {OPEN, CLOSING, CLOSED}\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n  private _closeFallbackTimeout: number;\n\n  /** Current state of the dialog. */\n  private _state = MatDialogState.OPEN;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n      this._finishDialogClose();\n    });\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }))\n      .subscribe(event => {\n        event.preventDefault();\n        this.close();\n      });\n\n    _overlayRef.backdropClick().subscribe(() => {\n      if (this.disableClose) {\n        this._containerInstance._recaptureFocus();\n      } else {\n        this.close();\n      }\n    });\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n\n      // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n      this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(),\n          event.totalTime + 100);\n    });\n\n    this._containerInstance._startExitAnimation();\n    this._state = MatDialogState.CLOSING;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    this._overlayRef.addPanelClass(classes);\n    return this;\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    this._overlayRef.removePanelClass(classes);\n    return this;\n  }\n\n  /** Gets the current state of the dialog's lifecycle. */\n  getState(): MatDialogState {\n    return this._state;\n  }\n\n  /**\n   * Finishes the dialog close by updating the state of the dialog\n   * and disposing the overlay.\n   */\n  private _finishDialogClose() {\n    this._state = MatDialogState.CLOSED;\n    this._overlayRef.dispose();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  StaticProvider,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  // TODO (jelbourn): tighten the typing right-hand side of this expression.\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined))) as Observable<any>;\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      /**\n       * @deprecated `_location` parameter to be removed.\n       * @breaking-change 10.0.0\n       */\n      @Optional() _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{provide: MatDialogConfig, useValue: config}]\n    });\n\n    const containerPortal = new ComponentPortal(MatDialogContainer,\n        config.viewContainerRef, injector, config.componentFactoryResolver);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, config.id);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{$implicit: config.data, dialogRef}));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): Injector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const providers: StaticProvider[] = [\n      {provide: MatDialogContainer, useValue: dialogContainer},\n      {provide: MAT_DIALOG_DATA, useValue: config.data},\n      {provide: MatDialogRef, useValue: dialogRef}\n    ];\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      providers.push({\n        provide: Directionality,\n        useValue: {value: config.direction, change: observableOf()}\n      });\n    }\n\n    return Injector.create({parent: userInjector || this._injector, providers});\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: '[mat-dialog-close], [matDialogClose]',\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.type]': 'type',\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Default to \"button\" to prevents accidental form submits. */\n  @Input() type: 'submit' | 'button' | 'reset' = 'button';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id: string = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}