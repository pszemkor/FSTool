{"version":3,"file":"progress-spinner.js","sources":["../../../../../../src/material/progress-spinner/progress-spinner.ts","../../../../../../src/material/progress-spinner/progress-spinner-module.ts","../../../../../../src/material/progress-spinner/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Platform, _getShadowRoot} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements OnInit, CanColor {\n  private _diameter = BASE_SIZE;\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /**\n   * Element to which we should add the generated style tags for the indeterminate animation.\n   * For most elements this is the document, but for the ones in the Shadow DOM we need to\n   * use the shadow root.\n   */\n  private _styleRoot: Node;\n\n  /**\n   * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n   * We need to keep track of which elements the diameters were attached to, because for\n   * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n   * than the document head.\n   */\n  private static _diameters = new WeakMap<Node, Set<number>>();\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (!this._fallbackAnimation && this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n\n    const trackedDiameters = MatProgressSpinner._diameters;\n\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set<number>([BASE_SIZE]));\n    }\n\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n    this._noopAnimations = animationMode === 'NoopAnimations' &&\n        (!!defaults && !defaults._forceAnimations);\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n  }\n\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element) || this._document.head;\n    this._attachStyleNode();\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    element.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      const styleTag: HTMLStyleElement = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n\n      if (!diametersForElement) {\n        diametersForElement = new Set<number>();\n        diameters.set(styleRoot, diametersForElement);\n      }\n\n      diametersForElement.add(currentDiameter);\n    }\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  static ngAcceptInputType_diameter: NumberInput;\n  static ngAcceptInputType_strokeWidth: NumberInput;\n  static ngAcceptInputType_value: NumberInput;\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef<HTMLElement>, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nexport class MatProgressSpinnerModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}