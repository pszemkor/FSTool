{"version":3,"file":"grid-list.js","sources":["../../../../../../src/material/grid-list/grid-list-base.ts","../../../../../../src/material/grid-list/grid-tile.ts","../../../../../../src/material/grid-list/tile-coordinator.ts","../../../../../../src/material/grid-list/tile-styler.ts","../../../../../../src/material/grid-list/grid-list.ts","../../../../../../src/material/grid-list/grid-list-module.ts","../../../../../../src/material/grid-list/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n    // the DOM. This is needed for the grid-tile harness.\n    '[attr.rowspan]': 'rowspan',\n    '[attr.colspan]': 'colspan'\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n\n  static ngAcceptInputType_rowspan: NumberInput;\n  static ngAcceptInputType_colspan: NumberInput;\n}\n\n@Component({\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Interface describing a tile.\n * @docs-private\n */\nexport interface Tile {\n  /** Amount of rows that the tile takes up. */\n  rowspan: number;\n  /** Amount of columns that the tile takes up. */\n  colspan: number;\n}\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   * @param tiles Tiles to be positioned.\n   */\n  update(numColumns: number, tiles: Tile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: Tile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: Tile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n    // needed for the grid-list harness.\n    '[attr.cols]': 'cols',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n\n  static ngAcceptInputType_cols: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MAT_GRID_LIST as Éµangular_material_src_material_grid_list_grid_list_a,MatGridListBase as Éµangular_material_src_material_grid_list_grid_list_b} from './grid-list-base';"]}