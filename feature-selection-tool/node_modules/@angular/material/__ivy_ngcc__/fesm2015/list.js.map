{"version":3,"file":"list.js","sources":["../../../../../../src/material/list/list.ts","../../../../../../src/material/list/selection-list.ts","../../../../../../src/material/list/list-module.ts","../../../../../../src/material/list/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, BooleanInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  mixinDisabled,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatListBase =\n    mixinDisabled(mixinDisableRipple(MatListBase));\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisable, CanDisableRipple,\n  OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Component({\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisable, CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item mat-focus-indicator',\n    '[class.mat-list-item-disabled]': 'disabled',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || !!(this._list && this._list.disabled); }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  hasModifierKey,\n  HOME,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n  isDevMode,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  mixinDisableRipple,\n  setLines,\n  ThemePalette,\n} from '@angular/material/core';\n\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option mat-focus-indicator',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme.\n    '[class.mat-primary]': 'color === \"primary\"',\n    // Even though accent is the default, we need to set this class anyway, because the  list might\n    // be placed inside a parent that has one of the other colors with a higher specificity.\n    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[class.mat-list-single-selected-option]': 'selected && !selectionList.multiple',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabindex]': '-1',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase implements AfterContentInit, OnDestroy,\n                                                                      OnInit, FocusableOption,\n                                                                      CanDisableRipple {\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n   * in the first cycle.\n   */\n  private _inputsInitialized = false;\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value && this._inputsInitialized) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n    this._inputsInitialized = true;\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled && (this.selectionList.multiple || !this.selected)) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabindex]': '_tabIndex',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n  private _multiple = true;\n  private _contentInitialized = false;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /**\n   * Tabindex of the selection list.\n   * @breaking-change 11.0.0 Remove `tabIndex` input.\n   */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** Whether selection is limited to one or multiple items (default multiple). */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._multiple) {\n      if (isDevMode() && this._contentInitialized) {\n        throw new Error(\n            'Cannot change `multiple` mode of mat-selection-list after initialization.');\n      }\n\n      this._multiple = newValue;\n      this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n    }\n  }\n\n  /** The currently selected options. */\n  selectedOptions = new SelectionModel<MatListOption>(this._multiple);\n\n  /** The tabindex of the selection list. */\n  _tabIndex = -1;\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n    // @breaking-change 11.0.0 Remove `tabIndex` parameter.\n    @Attribute('tabindex') tabIndex: string,\n    private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngAfterContentInit(): void {\n    this._contentInitialized = true;\n\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // If the user attempts to tab out of the selection list, allow focus to escape.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the number of options change, update the tabindex of the selection list.\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._updateTabIndex();\n    });\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier && !manager.isTyping()) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      default:\n        // The \"A\" key gets special treatment, because it's used for the \"select all\" functionality.\n        if (keyCode === A && this.multiple && hasModifierKey(event, 'ctrlKey') &&\n            !manager.isTyping()) {\n          const shouldSelect = this.options.some(option => !option.disabled && !option.selected);\n          this._setAllOptionsSelected(shouldSelect, true);\n          event.preventDefault();\n        } else {\n          manager.onKeydown(event);\n        }\n    }\n\n    if (this.multiple && (keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /**\n   * When the selection list is focused, we want to move focus to an option within the list. Do this\n   * by setting the appropriate option to be active.\n   */\n  _onFocus(): void {\n    const activeIndex = this._keyManager.activeItemIndex;\n\n    if (!activeIndex || (activeIndex === -1)) {\n      // If there is no active index, set focus to the first option.\n      this._keyManager.setFirstItemActive();\n    } else {\n      // Otherwise, set focus to the active option.\n      this._keyManager.setActiveItem(activeIndex);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean, skipDisabled?: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n\n  /**\n   * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\n   * to tab out of it. This prevents the list from capturing focus and redirecting it back within\n   * the list, creating a focus trap if it user tries to tab away.\n   */\n  private _allowFocusEscape() {\n    this._tabIndex = -1;\n\n    setTimeout(() => {\n      this._tabIndex = 0;\n      this._changeDetector.markForCheck();\n    });\n  }\n\n  /** Updates the tabindex based upon if the selection list is empty. */\n  private _updateTabIndex(): void {\n    this._tabIndex = (this.options.length === 0) ? -1 : 0;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}