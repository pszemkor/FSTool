{"version":3,"file":"sort.js","sources":["../../../../../../src/material/sort/sort-errors.ts","../../../../../../src/material/sort/sort.ts","../../../../../../src/material/sort/sort-animations.ts","../../../../../../src/material/sort/sort-header-intl.ts","../../../../../../src/material/sort/sort-header.ts","../../../../../../src/material/sort/sort-module.ts","../../../../../../src/material/sort/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  host: {'class': 'mat-sort'},\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableClear: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n  ElementRef,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    'class': 'mat-sort-header',\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef,\n              /**\n               * @deprecated _focusMonitor and _elementRef to become required parameters.\n               * @breaking-change 10.0.0\n               */\n              private _focusMonitor?: FocusMonitor,\n              private _elementRef?: ElementRef<HTMLElement>) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n\n    if (_focusMonitor && _elementRef) {\n      // We use the focus monitor because we also want to style\n      // things differently based on the focus origin.\n      _focusMonitor.monitor(_elementRef, true)\n          .subscribe(origin => this._setIndicatorHintVisible(!!origin));\n    }\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    // @breaking-change 10.0.0 Remove null check for _focusMonitor and _elementRef.\n    if (this._focusMonitor && this._elementRef) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n\n  static ngAcceptInputType_disableClear: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}