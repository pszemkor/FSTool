{"version":3,"file":"chips.js","sources":["../../../../../../src/material/chips/chip.ts","../../../../../../src/material/chips/chip-default-options.ts","../../../../../../src/material/chips/chip-list.ts","../../../../../../src/material/chips/chip-input.ts","../../../../../../src/material/chips/chips-module.ts","../../../../../../src/material/chips/index.ts"],"names":["nextUniqueId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ChangeDetectorRef,\n  Attribute,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor & CanDisableCtor &\n    HasTabIndexCtor & typeof MatChipBase =\n      mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary'), -1);\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple', 'tabIndex'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip mat-focus-indicator',\n    '[attr.tabindex]': 'disabled ? null : tabIndex',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget, HasTabIndex {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Reference to the element that acts as the chip's ripple target. This element is\n   * dynamically added as a child node of the chip. The chip itself cannot be used as the\n   * ripple target because it must be the host of the focus indicator.\n   */\n  private _chipRippleTarget: HTMLElement;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value !== undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              // @breaking-change 9.0.0 `_changeDetectorRef` parameter to become required.\n              private _changeDetectorRef?: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex?: string,\n              // @breaking-change 11.0.0 `_document` parameter to become required.\n              @Optional() @Inject(DOCUMENT) _document?: any) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    // Dynamically create the ripple target, append it within the chip, and use it as the\n    // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n    // the proper styles.\n    this._chipRippleTarget = (_document || document).createElement('div');\n    this._chipRippleTarget.classList.add('mat-chip-ripple');\n    this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n    this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef);\n\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._markForCheck();\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._markForCheck();\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n\n  private _markForCheck() {\n    // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_selectable: BooleanInput;\n  static ngAcceptInputType_removable: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(\n    protected _parentChip: MatChip,\n    // @breaking-change 11.0.0 `elementRef` parameter to be made required.\n    elementRef?: ElementRef<HTMLElement>) {\n\n      // @breaking-change 11.0.0 Remove null check for `elementRef`.\n    if (elementRef && elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n   }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'role ? required : null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n\n      if (this.ngControl.disabled !== this._disabled) {\n        this.disabled = !!this.ngControl.disabled;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options?: FocusOptions): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options?: FocusOptions) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItem(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip.disabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_selectable: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n    '[attr.aria-required]': '_chipList && _chipList.required || null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._inputElement.focus(options);\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n\n  static ngAcceptInputType_addOnBlur: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}