{"version":3,"file":"testing.js","sources":["../../../../../../src/material/icon/testing/fake-icon-registry.ts","../../../../../../src/material/icon/testing/index.ts"],"names":["observableOf"],"mappings":";;;;;;;;;;;;;;;AAuBA,MAAa,mBAAmB;AAAG;AAAQ;AAAsB;AAChE;AACD;AAAQ,IADN,UAAU;AAAK,QACb,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AAAsB;AAE3B;AAEiB;AAAQ,IAJzB,iBAAiB;AAAK,QACpB,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AAAsB;AACd;AAGA;AAAQ,IAJrB,qBAAqB;AAAK,QACxB,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AAAsB;AACrB;AAGA;AAAQ,IAJd,4BAA4B;AAAK,QAC/B,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AACJ;AAGF;AAAsB;AAAQ,IAJ7B,aAAa;AAAK,QAChB,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AAAsB;AACb;AAGA;AAAQ,IAJtB,oBAAoB;AAAK,QACvB,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AAAsB;AACjB;AAGA;AAAQ,IAJlB,wBAAwB;AAAK,QAC3B,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AAAsB;AACxB;AAGA;AAAQ,IAJX,+BAA+B;AAAK,QAClC,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AAAsB;AACf;AAGA;AAAQ,IAJpB,sBAAsB;AAAK,QACzB,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AAAwB;AAC9B;AAAQ,IADP,qBAAqB,CAAC,KAAa;AAAI,QACrC,OAAO,KAAK,CAAC;AACjB,KAAG;AACH;AACO;AAAmB;AACrB,IADH,sBAAsB;AACxB,QAAI,OAAO,gBAAgB,CAAC;AAC5B,KAAG;AACH;AACO;AAAmB;AAAQ,IAAhC,iBAAiB;AAAK,QACpB,OAAOA,EAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;AAClD,KAAG;AACH;AACO;AAAmB;AAAQ,IAAhC,eAAe;AAAK,QAClB,OAAOA,EAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;AAClD,KAAG;AACH;AACO;AAAsB;AACf;AAGA;AAEb,IANC,sBAAsB;AAAK,QACzB,0BAAO,IAAI,GAAC;AAChB,KAAG;AACH;AACO;AAEF;AAAQ,IAFX,WAAW,MAAM;AACnB;AACO;AAAgB;AAAmB;AACpC,IADI,iBAAiB;AAAK;AACnB,cAAH,QAAQ,GAAG,QAAQ,CAAC,eAAe,CAAC,4BAA4B,EAAE,KAAK,CAAC;AAClF,QAAI,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAC/C;AACI,QAAA,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AACrC,QAAI,QAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAC5C,QAAI,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC3C,QAAI,QAAQ,CAAC,YAAY,CAAC,qBAAqB,EAAE,eAAe,CAAC,CAAC;AAClE,QAAI,QAAQ,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;AAChD,QAAI,OAAO,QAAQ,CAAC;AACpB,KAAG;AACH;+CAvEC,UAAU;;;;0BACT;AAAC;AAAI;AAAkE;AA4EzE,MAAa,oBAAoB;AACjC;gDAJC,QAAQ,SAAC,kBACR;OAAS,EAAE,CAAC,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,mBAAmB,EAAC,CAAC,cACvE;;;;;;0BACI;AAAC;AAAC;AAAI;AAEJ;AAA2D;AAAsI;AAAI;ACrG5M;AACA;AACA,GAAG;AACH;AACA;AACwB","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgModule, OnDestroy} from '@angular/core';\nimport {MatIconRegistry} from '@angular/material/icon';\nimport {Observable, of as observableOf} from 'rxjs';\n\n// tslint:disable:no-any Impossible to tell param types.\ntype PublicApi<T> = {\n  [K in keyof T]: T[K] extends (...x: any[]) => T ? (...x: any[]) => PublicApi<T> : T[K]\n};\n// tslint:enable:no-any\n\n/**\n * A null icon registry that must be imported to allow disabling of custom\n * icons.\n */\n@Injectable()\nexport class FakeMatIconRegistry implements PublicApi<MatIconRegistry>, OnDestroy {\n  addSvgIcon(): this {\n    return this;\n  }\n\n  addSvgIconLiteral(): this {\n    return this;\n  }\n\n  addSvgIconInNamespace(): this {\n    return this;\n  }\n\n  addSvgIconLiteralInNamespace(): this {\n    return this;\n  }\n\n  addSvgIconSet(): this {\n    return this;\n  }\n\n  addSvgIconSetLiteral(): this {\n    return this;\n  }\n\n  addSvgIconSetInNamespace(): this {\n    return this;\n  }\n\n  addSvgIconSetLiteralInNamespace(): this {\n    return this;\n  }\n\n  registerFontClassAlias(): this {\n    return this;\n  }\n\n  classNameForFontAlias(alias: string): string {\n    return alias;\n  }\n\n  getDefaultFontSetClass() {\n    return 'material-icons';\n  }\n\n  getSvgIconFromUrl(): Observable<SVGElement> {\n    return observableOf(this._generateEmptySvg());\n  }\n\n  getNamedSvgIcon(): Observable<SVGElement> {\n    return observableOf(this._generateEmptySvg());\n  }\n\n  setDefaultFontSetClass(): this {\n    return this;\n  }\n\n  ngOnDestroy() { }\n\n  private _generateEmptySvg(): SVGElement {\n    const emptySvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    emptySvg.classList.add('fake-testing-svg');\n    // Emulate real icon characteristics from `MatIconRegistry` so size remains consistent in tests.\n    emptySvg.setAttribute('fit', '');\n    emptySvg.setAttribute('height', '100%');\n    emptySvg.setAttribute('width', '100%');\n    emptySvg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    emptySvg.setAttribute('focusable', 'false');\n    return emptySvg;\n  }\n}\n\n/** Import this module in tests to install the null icon registry. */\n@NgModule({\n  providers: [{provide: MatIconRegistry, useClass: FakeMatIconRegistry}]\n})\nexport class MatIconTestingModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}